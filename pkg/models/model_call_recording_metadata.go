/*
Bandwidth

Bandwidth's Communication APIs

API version: 1.0.0
Contact: letstalk@bandwidth.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"time"
)


// CallRecordingMetadata struct for CallRecordingMetadata
type CallRecordingMetadata struct {
	// The id of the application associated with the call.
	ApplicationId *string `json:"applicationId,omitempty"`
	// The user account associated with the call.
	AccountId *string `json:"accountId,omitempty"`
	// The call id associated with the event.
	CallId *string `json:"callId,omitempty"`
	// (optional) If the event is related to the B leg of a <Transfer>, the call id of the original call leg that executed the <Transfer>. Otherwise, this field will not be present.
	ParentCallId *string `json:"parentCallId,omitempty"`
	// The unique ID of this recording
	RecordingId *string `json:"recordingId,omitempty"`
	// The phone number that received the call, in E.164 format (e.g. +15555555555).
	To *string `json:"to,omitempty"`
	// The provided identifier of the caller. Must be a phone number in E.164 format (e.g. +15555555555).
	From *string `json:"from,omitempty"`
	// The phone number used as the from field of the B-leg call, in E.164 format (e.g. +15555555555).
	TransferCallerId *string `json:"transferCallerId,omitempty"`
	// The phone number used as the to field of the B-leg call, in E.164 format (e.g. +15555555555).
	TransferTo *string `json:"transferTo,omitempty"`
	// The duration of the recording in ISO-8601 format
	Duration *string `json:"duration,omitempty"`
	Direction *CallDirectionEnum `json:"direction,omitempty"`
	// Always `1` for conference recordings; multi-channel recordings are not supported on conferences.
	Channels *int32 `json:"channels,omitempty"`
	// Time the call was started, in ISO 8601 format.
	StartTime *time.Time `json:"startTime,omitempty"`
	// The time that the recording ended in ISO-8601 format
	EndTime *time.Time `json:"endTime,omitempty"`
	FileFormat *FileFormatEnum `json:"fileFormat,omitempty"`
	// The current status of the process. For recording, current possible values are 'processing', 'partial', 'complete', 'deleted', and 'error'. For transcriptions, current possible values are 'none', 'processing', 'available', 'error', 'timeout', 'file-size-too-big', and 'file-size-too-small'. Additional states may be added in the future, so your application must be tolerant of unknown values.
	Status *string `json:"status,omitempty"`
	// The URL that can be used to download the recording. Only present if the recording is finished and may be downloaded.
	MediaUrl utils.NullableString `json:"mediaUrl,omitempty"`
	Transcription NullableRecordingTranscriptionMetadata `json:"transcription,omitempty"`
	// A name to identify this recording.
	RecordingName *string `json:"recordingName,omitempty"`
}

// NewCallRecordingMetadata instantiates a new CallRecordingMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCallRecordingMetadata() *CallRecordingMetadata {
	this := CallRecordingMetadata{}
	return &this
}

// NewCallRecordingMetadataWithDefaults instantiates a new CallRecordingMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCallRecordingMetadataWithDefaults() *CallRecordingMetadata {
	this := CallRecordingMetadata{}
	return &this
}

// GetApplicationId returns the ApplicationId field value if set, zero value otherwise.
func (o *CallRecordingMetadata) GetApplicationId() string {
	if o == nil || utils.IsNil(o.ApplicationId) {
		var ret string
		return ret
	}
	return *o.ApplicationId
}

// GetApplicationIdOk returns a tuple with the ApplicationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRecordingMetadata) GetApplicationIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ApplicationId) {
		return nil, false
	}
	return o.ApplicationId, true
}

// HasApplicationId returns a boolean if a field has been set.
func (o *CallRecordingMetadata) HasApplicationId() bool {
	if o != nil && !utils.IsNil(o.ApplicationId) {
		return true
	}

	return false
}

// SetApplicationId gets a reference to the given string and assigns it to the ApplicationId field.
func (o *CallRecordingMetadata) SetApplicationId(v string) {
	o.ApplicationId = &v
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *CallRecordingMetadata) GetAccountId() string {
	if o == nil || utils.IsNil(o.AccountId) {
		var ret string
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRecordingMetadata) GetAccountIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *CallRecordingMetadata) HasAccountId() bool {
	if o != nil && !utils.IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given string and assigns it to the AccountId field.
func (o *CallRecordingMetadata) SetAccountId(v string) {
	o.AccountId = &v
}

// GetCallId returns the CallId field value if set, zero value otherwise.
func (o *CallRecordingMetadata) GetCallId() string {
	if o == nil || utils.IsNil(o.CallId) {
		var ret string
		return ret
	}
	return *o.CallId
}

// GetCallIdOk returns a tuple with the CallId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRecordingMetadata) GetCallIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.CallId) {
		return nil, false
	}
	return o.CallId, true
}

// HasCallId returns a boolean if a field has been set.
func (o *CallRecordingMetadata) HasCallId() bool {
	if o != nil && !utils.IsNil(o.CallId) {
		return true
	}

	return false
}

// SetCallId gets a reference to the given string and assigns it to the CallId field.
func (o *CallRecordingMetadata) SetCallId(v string) {
	o.CallId = &v
}

// GetParentCallId returns the ParentCallId field value if set, zero value otherwise.
func (o *CallRecordingMetadata) GetParentCallId() string {
	if o == nil || utils.IsNil(o.ParentCallId) {
		var ret string
		return ret
	}
	return *o.ParentCallId
}

// GetParentCallIdOk returns a tuple with the ParentCallId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRecordingMetadata) GetParentCallIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ParentCallId) {
		return nil, false
	}
	return o.ParentCallId, true
}

// HasParentCallId returns a boolean if a field has been set.
func (o *CallRecordingMetadata) HasParentCallId() bool {
	if o != nil && !utils.IsNil(o.ParentCallId) {
		return true
	}

	return false
}

// SetParentCallId gets a reference to the given string and assigns it to the ParentCallId field.
func (o *CallRecordingMetadata) SetParentCallId(v string) {
	o.ParentCallId = &v
}

// GetRecordingId returns the RecordingId field value if set, zero value otherwise.
func (o *CallRecordingMetadata) GetRecordingId() string {
	if o == nil || utils.IsNil(o.RecordingId) {
		var ret string
		return ret
	}
	return *o.RecordingId
}

// GetRecordingIdOk returns a tuple with the RecordingId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRecordingMetadata) GetRecordingIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.RecordingId) {
		return nil, false
	}
	return o.RecordingId, true
}

// HasRecordingId returns a boolean if a field has been set.
func (o *CallRecordingMetadata) HasRecordingId() bool {
	if o != nil && !utils.IsNil(o.RecordingId) {
		return true
	}

	return false
}

// SetRecordingId gets a reference to the given string and assigns it to the RecordingId field.
func (o *CallRecordingMetadata) SetRecordingId(v string) {
	o.RecordingId = &v
}

// GetTo returns the To field value if set, zero value otherwise.
func (o *CallRecordingMetadata) GetTo() string {
	if o == nil || utils.IsNil(o.To) {
		var ret string
		return ret
	}
	return *o.To
}

// GetToOk returns a tuple with the To field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRecordingMetadata) GetToOk() (*string, bool) {
	if o == nil || utils.IsNil(o.To) {
		return nil, false
	}
	return o.To, true
}

// HasTo returns a boolean if a field has been set.
func (o *CallRecordingMetadata) HasTo() bool {
	if o != nil && !utils.IsNil(o.To) {
		return true
	}

	return false
}

// SetTo gets a reference to the given string and assigns it to the To field.
func (o *CallRecordingMetadata) SetTo(v string) {
	o.To = &v
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *CallRecordingMetadata) GetFrom() string {
	if o == nil || utils.IsNil(o.From) {
		var ret string
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRecordingMetadata) GetFromOk() (*string, bool) {
	if o == nil || utils.IsNil(o.From) {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *CallRecordingMetadata) HasFrom() bool {
	if o != nil && !utils.IsNil(o.From) {
		return true
	}

	return false
}

// SetFrom gets a reference to the given string and assigns it to the From field.
func (o *CallRecordingMetadata) SetFrom(v string) {
	o.From = &v
}

// GetTransferCallerId returns the TransferCallerId field value if set, zero value otherwise.
func (o *CallRecordingMetadata) GetTransferCallerId() string {
	if o == nil || utils.IsNil(o.TransferCallerId) {
		var ret string
		return ret
	}
	return *o.TransferCallerId
}

// GetTransferCallerIdOk returns a tuple with the TransferCallerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRecordingMetadata) GetTransferCallerIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.TransferCallerId) {
		return nil, false
	}
	return o.TransferCallerId, true
}

// HasTransferCallerId returns a boolean if a field has been set.
func (o *CallRecordingMetadata) HasTransferCallerId() bool {
	if o != nil && !utils.IsNil(o.TransferCallerId) {
		return true
	}

	return false
}

// SetTransferCallerId gets a reference to the given string and assigns it to the TransferCallerId field.
func (o *CallRecordingMetadata) SetTransferCallerId(v string) {
	o.TransferCallerId = &v
}

// GetTransferTo returns the TransferTo field value if set, zero value otherwise.
func (o *CallRecordingMetadata) GetTransferTo() string {
	if o == nil || utils.IsNil(o.TransferTo) {
		var ret string
		return ret
	}
	return *o.TransferTo
}

// GetTransferToOk returns a tuple with the TransferTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRecordingMetadata) GetTransferToOk() (*string, bool) {
	if o == nil || utils.IsNil(o.TransferTo) {
		return nil, false
	}
	return o.TransferTo, true
}

// HasTransferTo returns a boolean if a field has been set.
func (o *CallRecordingMetadata) HasTransferTo() bool {
	if o != nil && !utils.IsNil(o.TransferTo) {
		return true
	}

	return false
}

// SetTransferTo gets a reference to the given string and assigns it to the TransferTo field.
func (o *CallRecordingMetadata) SetTransferTo(v string) {
	o.TransferTo = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *CallRecordingMetadata) GetDuration() string {
	if o == nil || utils.IsNil(o.Duration) {
		var ret string
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRecordingMetadata) GetDurationOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Duration) {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *CallRecordingMetadata) HasDuration() bool {
	if o != nil && !utils.IsNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given string and assigns it to the Duration field.
func (o *CallRecordingMetadata) SetDuration(v string) {
	o.Duration = &v
}

// GetDirection returns the Direction field value if set, zero value otherwise.
func (o *CallRecordingMetadata) GetDirection() CallDirectionEnum {
	if o == nil || utils.IsNil(o.Direction) {
		var ret CallDirectionEnum
		return ret
	}
	return *o.Direction
}

// GetDirectionOk returns a tuple with the Direction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRecordingMetadata) GetDirectionOk() (*CallDirectionEnum, bool) {
	if o == nil || utils.IsNil(o.Direction) {
		return nil, false
	}
	return o.Direction, true
}

// HasDirection returns a boolean if a field has been set.
func (o *CallRecordingMetadata) HasDirection() bool {
	if o != nil && !utils.IsNil(o.Direction) {
		return true
	}

	return false
}

// SetDirection gets a reference to the given CallDirectionEnum and assigns it to the Direction field.
func (o *CallRecordingMetadata) SetDirection(v CallDirectionEnum) {
	o.Direction = &v
}

// GetChannels returns the Channels field value if set, zero value otherwise.
func (o *CallRecordingMetadata) GetChannels() int32 {
	if o == nil || utils.IsNil(o.Channels) {
		var ret int32
		return ret
	}
	return *o.Channels
}

// GetChannelsOk returns a tuple with the Channels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRecordingMetadata) GetChannelsOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.Channels) {
		return nil, false
	}
	return o.Channels, true
}

// HasChannels returns a boolean if a field has been set.
func (o *CallRecordingMetadata) HasChannels() bool {
	if o != nil && !utils.IsNil(o.Channels) {
		return true
	}

	return false
}

// SetChannels gets a reference to the given int32 and assigns it to the Channels field.
func (o *CallRecordingMetadata) SetChannels(v int32) {
	o.Channels = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *CallRecordingMetadata) GetStartTime() time.Time {
	if o == nil || utils.IsNil(o.StartTime) {
		var ret time.Time
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRecordingMetadata) GetStartTimeOk() (*time.Time, bool) {
	if o == nil || utils.IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *CallRecordingMetadata) HasStartTime() bool {
	if o != nil && !utils.IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given time.Time and assigns it to the StartTime field.
func (o *CallRecordingMetadata) SetStartTime(v time.Time) {
	o.StartTime = &v
}

// GetEndTime returns the EndTime field value if set, zero value otherwise.
func (o *CallRecordingMetadata) GetEndTime() time.Time {
	if o == nil || utils.IsNil(o.EndTime) {
		var ret time.Time
		return ret
	}
	return *o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRecordingMetadata) GetEndTimeOk() (*time.Time, bool) {
	if o == nil || utils.IsNil(o.EndTime) {
		return nil, false
	}
	return o.EndTime, true
}

// HasEndTime returns a boolean if a field has been set.
func (o *CallRecordingMetadata) HasEndTime() bool {
	if o != nil && !utils.IsNil(o.EndTime) {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given time.Time and assigns it to the EndTime field.
func (o *CallRecordingMetadata) SetEndTime(v time.Time) {
	o.EndTime = &v
}

// GetFileFormat returns the FileFormat field value if set, zero value otherwise.
func (o *CallRecordingMetadata) GetFileFormat() FileFormatEnum {
	if o == nil || utils.IsNil(o.FileFormat) {
		var ret FileFormatEnum
		return ret
	}
	return *o.FileFormat
}

// GetFileFormatOk returns a tuple with the FileFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRecordingMetadata) GetFileFormatOk() (*FileFormatEnum, bool) {
	if o == nil || utils.IsNil(o.FileFormat) {
		return nil, false
	}
	return o.FileFormat, true
}

// HasFileFormat returns a boolean if a field has been set.
func (o *CallRecordingMetadata) HasFileFormat() bool {
	if o != nil && !utils.IsNil(o.FileFormat) {
		return true
	}

	return false
}

// SetFileFormat gets a reference to the given FileFormatEnum and assigns it to the FileFormat field.
func (o *CallRecordingMetadata) SetFileFormat(v FileFormatEnum) {
	o.FileFormat = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *CallRecordingMetadata) GetStatus() string {
	if o == nil || utils.IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRecordingMetadata) GetStatusOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *CallRecordingMetadata) HasStatus() bool {
	if o != nil && !utils.IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *CallRecordingMetadata) SetStatus(v string) {
	o.Status = &v
}

// GetMediaUrl returns the MediaUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CallRecordingMetadata) GetMediaUrl() string {
	if o == nil || utils.IsNil(o.MediaUrl.Get()) {
		var ret string
		return ret
	}
	return *o.MediaUrl.Get()
}

// GetMediaUrlOk returns a tuple with the MediaUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CallRecordingMetadata) GetMediaUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MediaUrl.Get(), o.MediaUrl.IsSet()
}

// HasMediaUrl returns a boolean if a field has been set.
func (o *CallRecordingMetadata) HasMediaUrl() bool {
	if o != nil && o.MediaUrl.IsSet() {
		return true
	}

	return false
}

// SetMediaUrl gets a reference to the given utils.NullableString and assigns it to the MediaUrl field.
func (o *CallRecordingMetadata) SetMediaUrl(v string) {
	o.MediaUrl.Set(&v)
}
// SetMediaUrlNil sets the value for MediaUrl to be an explicit nil
func (o *CallRecordingMetadata) SetMediaUrlNil() {
	o.MediaUrl.Set(nil)
}

// UnsetMediaUrl ensures that no value is present for MediaUrl, not even an explicit nil
func (o *CallRecordingMetadata) UnsetMediaUrl() {
	o.MediaUrl.Unset()
}

// GetTranscription returns the Transcription field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CallRecordingMetadata) GetTranscription() RecordingTranscriptionMetadata {
	if o == nil || utils.IsNil(o.Transcription.Get()) {
		var ret RecordingTranscriptionMetadata
		return ret
	}
	return *o.Transcription.Get()
}

// GetTranscriptionOk returns a tuple with the Transcription field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CallRecordingMetadata) GetTranscriptionOk() (*RecordingTranscriptionMetadata, bool) {
	if o == nil {
		return nil, false
	}
	return o.Transcription.Get(), o.Transcription.IsSet()
}

// HasTranscription returns a boolean if a field has been set.
func (o *CallRecordingMetadata) HasTranscription() bool {
	if o != nil && o.Transcription.IsSet() {
		return true
	}

	return false
}

// SetTranscription gets a reference to the given NullableRecordingTranscriptionMetadata and assigns it to the Transcription field.
func (o *CallRecordingMetadata) SetTranscription(v RecordingTranscriptionMetadata) {
	o.Transcription.Set(&v)
}
// SetTranscriptionNil sets the value for Transcription to be an explicit nil
func (o *CallRecordingMetadata) SetTranscriptionNil() {
	o.Transcription.Set(nil)
}

// UnsetTranscription ensures that no value is present for Transcription, not even an explicit nil
func (o *CallRecordingMetadata) UnsetTranscription() {
	o.Transcription.Unset()
}

// GetRecordingName returns the RecordingName field value if set, zero value otherwise.
func (o *CallRecordingMetadata) GetRecordingName() string {
	if o == nil || utils.IsNil(o.RecordingName) {
		var ret string
		return ret
	}
	return *o.RecordingName
}

// GetRecordingNameOk returns a tuple with the RecordingName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRecordingMetadata) GetRecordingNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.RecordingName) {
		return nil, false
	}
	return o.RecordingName, true
}

// HasRecordingName returns a boolean if a field has been set.
func (o *CallRecordingMetadata) HasRecordingName() bool {
	if o != nil && !utils.IsNil(o.RecordingName) {
		return true
	}

	return false
}

// SetRecordingName gets a reference to the given string and assigns it to the RecordingName field.
func (o *CallRecordingMetadata) SetRecordingName(v string) {
	o.RecordingName = &v
}

func (o CallRecordingMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CallRecordingMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.ApplicationId) {
		toSerialize["applicationId"] = o.ApplicationId
	}
	if !utils.IsNil(o.AccountId) {
		toSerialize["accountId"] = o.AccountId
	}
	if !utils.IsNil(o.CallId) {
		toSerialize["callId"] = o.CallId
	}
	if !utils.IsNil(o.ParentCallId) {
		toSerialize["parentCallId"] = o.ParentCallId
	}
	if !utils.IsNil(o.RecordingId) {
		toSerialize["recordingId"] = o.RecordingId
	}
	if !utils.IsNil(o.To) {
		toSerialize["to"] = o.To
	}
	if !utils.IsNil(o.From) {
		toSerialize["from"] = o.From
	}
	if !utils.IsNil(o.TransferCallerId) {
		toSerialize["transferCallerId"] = o.TransferCallerId
	}
	if !utils.IsNil(o.TransferTo) {
		toSerialize["transferTo"] = o.TransferTo
	}
	if !utils.IsNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	if !utils.IsNil(o.Direction) {
		toSerialize["direction"] = o.Direction
	}
	if !utils.IsNil(o.Channels) {
		toSerialize["channels"] = o.Channels
	}
	if !utils.IsNil(o.StartTime) {
		toSerialize["startTime"] = o.StartTime
	}
	if !utils.IsNil(o.EndTime) {
		toSerialize["endTime"] = o.EndTime
	}
	if !utils.IsNil(o.FileFormat) {
		toSerialize["fileFormat"] = o.FileFormat
	}
	if !utils.IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if o.MediaUrl.IsSet() {
		toSerialize["mediaUrl"] = o.MediaUrl.Get()
	}
	if o.Transcription.IsSet() {
		toSerialize["transcription"] = o.Transcription.Get()
	}
	if !utils.IsNil(o.RecordingName) {
		toSerialize["recordingName"] = o.RecordingName
	}
	return toSerialize, nil
}

type NullableCallRecordingMetadata struct {
	value *CallRecordingMetadata
	isSet bool
}

func (v NullableCallRecordingMetadata) Get() *CallRecordingMetadata {
	return v.value
}

func (v *NullableCallRecordingMetadata) Set(val *CallRecordingMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableCallRecordingMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableCallRecordingMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCallRecordingMetadata(val *CallRecordingMetadata) *NullableCallRecordingMetadata {
	return &NullableCallRecordingMetadata{value: val, isSet: true}
}

func (v NullableCallRecordingMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCallRecordingMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


