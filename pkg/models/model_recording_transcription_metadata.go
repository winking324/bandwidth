/*
Bandwidth

Bandwidth's Communication APIs

API version: 1.0.0
Contact: letstalk@bandwidth.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"time"
)




// RecordingTranscriptionMetadata If the recording was transcribed, metadata about the transcription
type RecordingTranscriptionMetadata struct {
	// The unique transcription ID
	Id *string `json:"id,omitempty"`
	// The current status of the process. For recording, current possible values are 'processing', 'partial', 'complete', 'deleted', and 'error'. For transcriptions, current possible values are 'none', 'processing', 'available', 'error', 'timeout', 'file-size-too-big', and 'file-size-too-small'. Additional states may be added in the future, so your application must be tolerant of unknown values.
	Status *string `json:"status,omitempty"`
	// The time that the transcription was completed
	CompletedTime *time.Time `json:"completedTime,omitempty"`
	// The URL of the [transcription](#operation/getCallTranscription)
	Url *string `json:"url,omitempty"`
}

// NewRecordingTranscriptionMetadata instantiates a new RecordingTranscriptionMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecordingTranscriptionMetadata() *RecordingTranscriptionMetadata {
	this := RecordingTranscriptionMetadata{}
	return &this
}

// NewRecordingTranscriptionMetadataWithDefaults instantiates a new RecordingTranscriptionMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecordingTranscriptionMetadataWithDefaults() *RecordingTranscriptionMetadata {
	this := RecordingTranscriptionMetadata{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RecordingTranscriptionMetadata) GetId() string {
	if o == nil || utils.IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordingTranscriptionMetadata) GetIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RecordingTranscriptionMetadata) HasId() bool {
	if o != nil && !utils.IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RecordingTranscriptionMetadata) SetId(v string) {
	o.Id = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *RecordingTranscriptionMetadata) GetStatus() string {
	if o == nil || utils.IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordingTranscriptionMetadata) GetStatusOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *RecordingTranscriptionMetadata) HasStatus() bool {
	if o != nil && !utils.IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *RecordingTranscriptionMetadata) SetStatus(v string) {
	o.Status = &v
}

// GetCompletedTime returns the CompletedTime field value if set, zero value otherwise.
func (o *RecordingTranscriptionMetadata) GetCompletedTime() time.Time {
	if o == nil || utils.IsNil(o.CompletedTime) {
		var ret time.Time
		return ret
	}
	return *o.CompletedTime
}

// GetCompletedTimeOk returns a tuple with the CompletedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordingTranscriptionMetadata) GetCompletedTimeOk() (*time.Time, bool) {
	if o == nil || utils.IsNil(o.CompletedTime) {
		return nil, false
	}
	return o.CompletedTime, true
}

// HasCompletedTime returns a boolean if a field has been set.
func (o *RecordingTranscriptionMetadata) HasCompletedTime() bool {
	if o != nil && !utils.IsNil(o.CompletedTime) {
		return true
	}

	return false
}

// SetCompletedTime gets a reference to the given time.Time and assigns it to the CompletedTime field.
func (o *RecordingTranscriptionMetadata) SetCompletedTime(v time.Time) {
	o.CompletedTime = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *RecordingTranscriptionMetadata) GetUrl() string {
	if o == nil || utils.IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordingTranscriptionMetadata) GetUrlOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *RecordingTranscriptionMetadata) HasUrl() bool {
	if o != nil && !utils.IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *RecordingTranscriptionMetadata) SetUrl(v string) {
	o.Url = &v
}

func (o RecordingTranscriptionMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecordingTranscriptionMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !utils.IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !utils.IsNil(o.CompletedTime) {
		toSerialize["completedTime"] = o.CompletedTime
	}
	if !utils.IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

type NullableRecordingTranscriptionMetadata struct {
	value *RecordingTranscriptionMetadata
	isSet bool
}

func (v NullableRecordingTranscriptionMetadata) Get() *RecordingTranscriptionMetadata {
	return v.value
}

func (v *NullableRecordingTranscriptionMetadata) Set(val *RecordingTranscriptionMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableRecordingTranscriptionMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableRecordingTranscriptionMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecordingTranscriptionMetadata(val *RecordingTranscriptionMetadata) *NullableRecordingTranscriptionMetadata {
	return &NullableRecordingTranscriptionMetadata{value: val, isSet: true}
}

func (v NullableRecordingTranscriptionMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecordingTranscriptionMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


