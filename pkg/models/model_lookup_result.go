/*
Bandwidth

Bandwidth's Communication APIs

API version: 1.0.0
Contact: letstalk@bandwidth.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)




// LookupResult Carrier information results for the specified telephone number.
type LookupResult struct {
	// Our vendor's response code.
	ResponseCode *int32 `json:"Response Code,omitempty"`
	// Message associated with the response code.
	Message *string `json:"Message,omitempty"`
	// The telephone number in E.164 format.
	E164Format *string `json:"E.164 Format,omitempty"`
	// The formatted version of the telephone number.
	Formatted *string `json:"Formatted,omitempty"`
	// The country of the telephone number.
	Country *string `json:"Country,omitempty"`
	// The line type of the telephone number.
	LineType *string `json:"Line Type,omitempty"`
	// The messaging service provider of the telephone number.
	LineProvider *string `json:"Line Provider,omitempty"`
	// The first half of the Home Network Identity (HNI).
	MobileCountryCode *string `json:"Mobile Country Code,omitempty"`
	// The second half of the HNI.
	MobileNetworkCode *string `json:"Mobile Network Code,omitempty"`
}

// NewLookupResult instantiates a new LookupResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLookupResult() *LookupResult {
	this := LookupResult{}
	return &this
}

// NewLookupResultWithDefaults instantiates a new LookupResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLookupResultWithDefaults() *LookupResult {
	this := LookupResult{}
	return &this
}

// GetResponseCode returns the ResponseCode field value if set, zero value otherwise.
func (o *LookupResult) GetResponseCode() int32 {
	if o == nil || utils.IsNil(o.ResponseCode) {
		var ret int32
		return ret
	}
	return *o.ResponseCode
}

// GetResponseCodeOk returns a tuple with the ResponseCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LookupResult) GetResponseCodeOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.ResponseCode) {
		return nil, false
	}
	return o.ResponseCode, true
}

// HasResponseCode returns a boolean if a field has been set.
func (o *LookupResult) HasResponseCode() bool {
	if o != nil && !utils.IsNil(o.ResponseCode) {
		return true
	}

	return false
}

// SetResponseCode gets a reference to the given int32 and assigns it to the ResponseCode field.
func (o *LookupResult) SetResponseCode(v int32) {
	o.ResponseCode = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *LookupResult) GetMessage() string {
	if o == nil || utils.IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LookupResult) GetMessageOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *LookupResult) HasMessage() bool {
	if o != nil && !utils.IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *LookupResult) SetMessage(v string) {
	o.Message = &v
}

// GetE164Format returns the E164Format field value if set, zero value otherwise.
func (o *LookupResult) GetE164Format() string {
	if o == nil || utils.IsNil(o.E164Format) {
		var ret string
		return ret
	}
	return *o.E164Format
}

// GetE164FormatOk returns a tuple with the E164Format field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LookupResult) GetE164FormatOk() (*string, bool) {
	if o == nil || utils.IsNil(o.E164Format) {
		return nil, false
	}
	return o.E164Format, true
}

// HasE164Format returns a boolean if a field has been set.
func (o *LookupResult) HasE164Format() bool {
	if o != nil && !utils.IsNil(o.E164Format) {
		return true
	}

	return false
}

// SetE164Format gets a reference to the given string and assigns it to the E164Format field.
func (o *LookupResult) SetE164Format(v string) {
	o.E164Format = &v
}

// GetFormatted returns the Formatted field value if set, zero value otherwise.
func (o *LookupResult) GetFormatted() string {
	if o == nil || utils.IsNil(o.Formatted) {
		var ret string
		return ret
	}
	return *o.Formatted
}

// GetFormattedOk returns a tuple with the Formatted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LookupResult) GetFormattedOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Formatted) {
		return nil, false
	}
	return o.Formatted, true
}

// HasFormatted returns a boolean if a field has been set.
func (o *LookupResult) HasFormatted() bool {
	if o != nil && !utils.IsNil(o.Formatted) {
		return true
	}

	return false
}

// SetFormatted gets a reference to the given string and assigns it to the Formatted field.
func (o *LookupResult) SetFormatted(v string) {
	o.Formatted = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *LookupResult) GetCountry() string {
	if o == nil || utils.IsNil(o.Country) {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LookupResult) GetCountryOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *LookupResult) HasCountry() bool {
	if o != nil && !utils.IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *LookupResult) SetCountry(v string) {
	o.Country = &v
}

// GetLineType returns the LineType field value if set, zero value otherwise.
func (o *LookupResult) GetLineType() string {
	if o == nil || utils.IsNil(o.LineType) {
		var ret string
		return ret
	}
	return *o.LineType
}

// GetLineTypeOk returns a tuple with the LineType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LookupResult) GetLineTypeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.LineType) {
		return nil, false
	}
	return o.LineType, true
}

// HasLineType returns a boolean if a field has been set.
func (o *LookupResult) HasLineType() bool {
	if o != nil && !utils.IsNil(o.LineType) {
		return true
	}

	return false
}

// SetLineType gets a reference to the given string and assigns it to the LineType field.
func (o *LookupResult) SetLineType(v string) {
	o.LineType = &v
}

// GetLineProvider returns the LineProvider field value if set, zero value otherwise.
func (o *LookupResult) GetLineProvider() string {
	if o == nil || utils.IsNil(o.LineProvider) {
		var ret string
		return ret
	}
	return *o.LineProvider
}

// GetLineProviderOk returns a tuple with the LineProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LookupResult) GetLineProviderOk() (*string, bool) {
	if o == nil || utils.IsNil(o.LineProvider) {
		return nil, false
	}
	return o.LineProvider, true
}

// HasLineProvider returns a boolean if a field has been set.
func (o *LookupResult) HasLineProvider() bool {
	if o != nil && !utils.IsNil(o.LineProvider) {
		return true
	}

	return false
}

// SetLineProvider gets a reference to the given string and assigns it to the LineProvider field.
func (o *LookupResult) SetLineProvider(v string) {
	o.LineProvider = &v
}

// GetMobileCountryCode returns the MobileCountryCode field value if set, zero value otherwise.
func (o *LookupResult) GetMobileCountryCode() string {
	if o == nil || utils.IsNil(o.MobileCountryCode) {
		var ret string
		return ret
	}
	return *o.MobileCountryCode
}

// GetMobileCountryCodeOk returns a tuple with the MobileCountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LookupResult) GetMobileCountryCodeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.MobileCountryCode) {
		return nil, false
	}
	return o.MobileCountryCode, true
}

// HasMobileCountryCode returns a boolean if a field has been set.
func (o *LookupResult) HasMobileCountryCode() bool {
	if o != nil && !utils.IsNil(o.MobileCountryCode) {
		return true
	}

	return false
}

// SetMobileCountryCode gets a reference to the given string and assigns it to the MobileCountryCode field.
func (o *LookupResult) SetMobileCountryCode(v string) {
	o.MobileCountryCode = &v
}

// GetMobileNetworkCode returns the MobileNetworkCode field value if set, zero value otherwise.
func (o *LookupResult) GetMobileNetworkCode() string {
	if o == nil || utils.IsNil(o.MobileNetworkCode) {
		var ret string
		return ret
	}
	return *o.MobileNetworkCode
}

// GetMobileNetworkCodeOk returns a tuple with the MobileNetworkCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LookupResult) GetMobileNetworkCodeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.MobileNetworkCode) {
		return nil, false
	}
	return o.MobileNetworkCode, true
}

// HasMobileNetworkCode returns a boolean if a field has been set.
func (o *LookupResult) HasMobileNetworkCode() bool {
	if o != nil && !utils.IsNil(o.MobileNetworkCode) {
		return true
	}

	return false
}

// SetMobileNetworkCode gets a reference to the given string and assigns it to the MobileNetworkCode field.
func (o *LookupResult) SetMobileNetworkCode(v string) {
	o.MobileNetworkCode = &v
}

func (o LookupResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LookupResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.ResponseCode) {
		toSerialize["Response Code"] = o.ResponseCode
	}
	if !utils.IsNil(o.Message) {
		toSerialize["Message"] = o.Message
	}
	if !utils.IsNil(o.E164Format) {
		toSerialize["E.164 Format"] = o.E164Format
	}
	if !utils.IsNil(o.Formatted) {
		toSerialize["Formatted"] = o.Formatted
	}
	if !utils.IsNil(o.Country) {
		toSerialize["Country"] = o.Country
	}
	if !utils.IsNil(o.LineType) {
		toSerialize["Line Type"] = o.LineType
	}
	if !utils.IsNil(o.LineProvider) {
		toSerialize["Line Provider"] = o.LineProvider
	}
	if !utils.IsNil(o.MobileCountryCode) {
		toSerialize["Mobile Country Code"] = o.MobileCountryCode
	}
	if !utils.IsNil(o.MobileNetworkCode) {
		toSerialize["Mobile Network Code"] = o.MobileNetworkCode
	}
	return toSerialize, nil
}

type NullableLookupResult struct {
	value *LookupResult
	isSet bool
}

func (v NullableLookupResult) Get() *LookupResult {
	return v.value
}

func (v *NullableLookupResult) Set(val *LookupResult) {
	v.value = val
	v.isSet = true
}

func (v NullableLookupResult) IsSet() bool {
	return v.isSet
}

func (v *NullableLookupResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLookupResult(val *LookupResult) *NullableLookupResult {
	return &NullableLookupResult{value: val, isSet: true}
}

func (v NullableLookupResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLookupResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


