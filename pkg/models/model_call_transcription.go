/*
Bandwidth

Bandwidth's Communication APIs

API version: 1.0.0
Contact: letstalk@bandwidth.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// CallTranscription struct for CallTranscription
type CallTranscription struct {
	DetectedLanguage *CallTranscriptionDetectedLanguageEnum `json:"detectedLanguage,omitempty"`
	Track *CallTranscriptionTrackEnum `json:"track,omitempty"`
	// The transcription itself.
	Transcript *string `json:"transcript,omitempty"`
	// How confident the transcription engine was in transcribing the associated audio (from `0` to `1`).
	Confidence *float64 `json:"confidence,omitempty"`
}

// NewCallTranscription instantiates a new CallTranscription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCallTranscription() *CallTranscription {
	this := CallTranscription{}
	return &this
}

// NewCallTranscriptionWithDefaults instantiates a new CallTranscription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCallTranscriptionWithDefaults() *CallTranscription {
	this := CallTranscription{}
	return &this
}

// GetDetectedLanguage returns the DetectedLanguage field value if set, zero value otherwise.
func (o *CallTranscription) GetDetectedLanguage() CallTranscriptionDetectedLanguageEnum {
	if o == nil || utils.IsNil(o.DetectedLanguage) {
		var ret CallTranscriptionDetectedLanguageEnum
		return ret
	}
	return *o.DetectedLanguage
}

// GetDetectedLanguageOk returns a tuple with the DetectedLanguage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallTranscription) GetDetectedLanguageOk() (*CallTranscriptionDetectedLanguageEnum, bool) {
	if o == nil || utils.IsNil(o.DetectedLanguage) {
		return nil, false
	}
	return o.DetectedLanguage, true
}

// HasDetectedLanguage returns a boolean if a field has been set.
func (o *CallTranscription) HasDetectedLanguage() bool {
	if o != nil && !utils.IsNil(o.DetectedLanguage) {
		return true
	}

	return false
}

// SetDetectedLanguage gets a reference to the given CallTranscriptionDetectedLanguageEnum and assigns it to the DetectedLanguage field.
func (o *CallTranscription) SetDetectedLanguage(v CallTranscriptionDetectedLanguageEnum) {
	o.DetectedLanguage = &v
}

// GetTrack returns the Track field value if set, zero value otherwise.
func (o *CallTranscription) GetTrack() CallTranscriptionTrackEnum {
	if o == nil || utils.IsNil(o.Track) {
		var ret CallTranscriptionTrackEnum
		return ret
	}
	return *o.Track
}

// GetTrackOk returns a tuple with the Track field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallTranscription) GetTrackOk() (*CallTranscriptionTrackEnum, bool) {
	if o == nil || utils.IsNil(o.Track) {
		return nil, false
	}
	return o.Track, true
}

// HasTrack returns a boolean if a field has been set.
func (o *CallTranscription) HasTrack() bool {
	if o != nil && !utils.IsNil(o.Track) {
		return true
	}

	return false
}

// SetTrack gets a reference to the given CallTranscriptionTrackEnum and assigns it to the Track field.
func (o *CallTranscription) SetTrack(v CallTranscriptionTrackEnum) {
	o.Track = &v
}

// GetTranscript returns the Transcript field value if set, zero value otherwise.
func (o *CallTranscription) GetTranscript() string {
	if o == nil || utils.IsNil(o.Transcript) {
		var ret string
		return ret
	}
	return *o.Transcript
}

// GetTranscriptOk returns a tuple with the Transcript field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallTranscription) GetTranscriptOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Transcript) {
		return nil, false
	}
	return o.Transcript, true
}

// HasTranscript returns a boolean if a field has been set.
func (o *CallTranscription) HasTranscript() bool {
	if o != nil && !utils.IsNil(o.Transcript) {
		return true
	}

	return false
}

// SetTranscript gets a reference to the given string and assigns it to the Transcript field.
func (o *CallTranscription) SetTranscript(v string) {
	o.Transcript = &v
}

// GetConfidence returns the Confidence field value if set, zero value otherwise.
func (o *CallTranscription) GetConfidence() float64 {
	if o == nil || utils.IsNil(o.Confidence) {
		var ret float64
		return ret
	}
	return *o.Confidence
}

// GetConfidenceOk returns a tuple with the Confidence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallTranscription) GetConfidenceOk() (*float64, bool) {
	if o == nil || utils.IsNil(o.Confidence) {
		return nil, false
	}
	return o.Confidence, true
}

// HasConfidence returns a boolean if a field has been set.
func (o *CallTranscription) HasConfidence() bool {
	if o != nil && !utils.IsNil(o.Confidence) {
		return true
	}

	return false
}

// SetConfidence gets a reference to the given float64 and assigns it to the Confidence field.
func (o *CallTranscription) SetConfidence(v float64) {
	o.Confidence = &v
}

func (o CallTranscription) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CallTranscription) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.DetectedLanguage) {
		toSerialize["detectedLanguage"] = o.DetectedLanguage
	}
	if !utils.IsNil(o.Track) {
		toSerialize["track"] = o.Track
	}
	if !utils.IsNil(o.Transcript) {
		toSerialize["transcript"] = o.Transcript
	}
	if !utils.IsNil(o.Confidence) {
		toSerialize["confidence"] = o.Confidence
	}
	return toSerialize, nil
}

type NullableCallTranscription struct {
	value *CallTranscription
	isSet bool
}

func (v NullableCallTranscription) Get() *CallTranscription {
	return v.value
}

func (v *NullableCallTranscription) Set(val *CallTranscription) {
	v.value = val
	v.isSet = true
}

func (v NullableCallTranscription) IsSet() bool {
	return v.isSet
}

func (v *NullableCallTranscription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCallTranscription(val *CallTranscription) *NullableCallTranscription {
	return &NullableCallTranscription{value: val, isSet: true}
}

func (v NullableCallTranscription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCallTranscription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


