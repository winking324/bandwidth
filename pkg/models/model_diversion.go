/*
Bandwidth

Bandwidth's Communication APIs

API version: 1.0.0
Contact: letstalk@bandwidth.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// Diversion struct for Diversion
type Diversion struct {
	// The reason for the diversion. Common values: unknown, user-busy, no-answer, unavailable, unconditional, time-of-day, do-not-disturb, deflection, follow-me, out-of-service, away.
	Reason *string `json:"reason,omitempty"`
	// off or full
	Privacy *string `json:"privacy,omitempty"`
	// No if the number was provided by the user, yes if the number was provided by the network
	Screen *string `json:"screen,omitempty"`
	// The number of diversions that have occurred
	Counter *string `json:"counter,omitempty"`
	// The maximum number of diversions allowed for this session
	Limit *string `json:"limit,omitempty"`
	// The normal list of values is not exhaustive. Your application must be tolerant of unlisted keys and unlisted values of those keys.
	Unknown *string `json:"unknown,omitempty"`
	// Always present. Indicates the last telephone number that the call was diverted from.
	OrigTo *string `json:"origTo,omitempty"`
}

// NewDiversion instantiates a new Diversion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiversion() *Diversion {
	this := Diversion{}
	return &this
}

// NewDiversionWithDefaults instantiates a new Diversion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiversionWithDefaults() *Diversion {
	this := Diversion{}
	return &this
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *Diversion) GetReason() string {
	if o == nil || utils.IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Diversion) GetReasonOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *Diversion) HasReason() bool {
	if o != nil && !utils.IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *Diversion) SetReason(v string) {
	o.Reason = &v
}

// GetPrivacy returns the Privacy field value if set, zero value otherwise.
func (o *Diversion) GetPrivacy() string {
	if o == nil || utils.IsNil(o.Privacy) {
		var ret string
		return ret
	}
	return *o.Privacy
}

// GetPrivacyOk returns a tuple with the Privacy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Diversion) GetPrivacyOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Privacy) {
		return nil, false
	}
	return o.Privacy, true
}

// HasPrivacy returns a boolean if a field has been set.
func (o *Diversion) HasPrivacy() bool {
	if o != nil && !utils.IsNil(o.Privacy) {
		return true
	}

	return false
}

// SetPrivacy gets a reference to the given string and assigns it to the Privacy field.
func (o *Diversion) SetPrivacy(v string) {
	o.Privacy = &v
}

// GetScreen returns the Screen field value if set, zero value otherwise.
func (o *Diversion) GetScreen() string {
	if o == nil || utils.IsNil(o.Screen) {
		var ret string
		return ret
	}
	return *o.Screen
}

// GetScreenOk returns a tuple with the Screen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Diversion) GetScreenOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Screen) {
		return nil, false
	}
	return o.Screen, true
}

// HasScreen returns a boolean if a field has been set.
func (o *Diversion) HasScreen() bool {
	if o != nil && !utils.IsNil(o.Screen) {
		return true
	}

	return false
}

// SetScreen gets a reference to the given string and assigns it to the Screen field.
func (o *Diversion) SetScreen(v string) {
	o.Screen = &v
}

// GetCounter returns the Counter field value if set, zero value otherwise.
func (o *Diversion) GetCounter() string {
	if o == nil || utils.IsNil(o.Counter) {
		var ret string
		return ret
	}
	return *o.Counter
}

// GetCounterOk returns a tuple with the Counter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Diversion) GetCounterOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Counter) {
		return nil, false
	}
	return o.Counter, true
}

// HasCounter returns a boolean if a field has been set.
func (o *Diversion) HasCounter() bool {
	if o != nil && !utils.IsNil(o.Counter) {
		return true
	}

	return false
}

// SetCounter gets a reference to the given string and assigns it to the Counter field.
func (o *Diversion) SetCounter(v string) {
	o.Counter = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *Diversion) GetLimit() string {
	if o == nil || utils.IsNil(o.Limit) {
		var ret string
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Diversion) GetLimitOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *Diversion) HasLimit() bool {
	if o != nil && !utils.IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given string and assigns it to the Limit field.
func (o *Diversion) SetLimit(v string) {
	o.Limit = &v
}

// GetUnknown returns the Unknown field value if set, zero value otherwise.
func (o *Diversion) GetUnknown() string {
	if o == nil || utils.IsNil(o.Unknown) {
		var ret string
		return ret
	}
	return *o.Unknown
}

// GetUnknownOk returns a tuple with the Unknown field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Diversion) GetUnknownOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Unknown) {
		return nil, false
	}
	return o.Unknown, true
}

// HasUnknown returns a boolean if a field has been set.
func (o *Diversion) HasUnknown() bool {
	if o != nil && !utils.IsNil(o.Unknown) {
		return true
	}

	return false
}

// SetUnknown gets a reference to the given string and assigns it to the Unknown field.
func (o *Diversion) SetUnknown(v string) {
	o.Unknown = &v
}

// GetOrigTo returns the OrigTo field value if set, zero value otherwise.
func (o *Diversion) GetOrigTo() string {
	if o == nil || utils.IsNil(o.OrigTo) {
		var ret string
		return ret
	}
	return *o.OrigTo
}

// GetOrigToOk returns a tuple with the OrigTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Diversion) GetOrigToOk() (*string, bool) {
	if o == nil || utils.IsNil(o.OrigTo) {
		return nil, false
	}
	return o.OrigTo, true
}

// HasOrigTo returns a boolean if a field has been set.
func (o *Diversion) HasOrigTo() bool {
	if o != nil && !utils.IsNil(o.OrigTo) {
		return true
	}

	return false
}

// SetOrigTo gets a reference to the given string and assigns it to the OrigTo field.
func (o *Diversion) SetOrigTo(v string) {
	o.OrigTo = &v
}

func (o Diversion) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Diversion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	if !utils.IsNil(o.Privacy) {
		toSerialize["privacy"] = o.Privacy
	}
	if !utils.IsNil(o.Screen) {
		toSerialize["screen"] = o.Screen
	}
	if !utils.IsNil(o.Counter) {
		toSerialize["counter"] = o.Counter
	}
	if !utils.IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !utils.IsNil(o.Unknown) {
		toSerialize["unknown"] = o.Unknown
	}
	if !utils.IsNil(o.OrigTo) {
		toSerialize["origTo"] = o.OrigTo
	}
	return toSerialize, nil
}

type NullableDiversion struct {
	value *Diversion
	isSet bool
}

func (v NullableDiversion) Get() *Diversion {
	return v.value
}

func (v *NullableDiversion) Set(val *Diversion) {
	v.value = val
	v.isSet = true
}

func (v NullableDiversion) IsSet() bool {
	return v.isSet
}

func (v *NullableDiversion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiversion(val *Diversion) *NullableDiversion {
	return &NullableDiversion{value: val, isSet: true}
}

func (v NullableDiversion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiversion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


