/*
Bandwidth

Bandwidth's Communication APIs

API version: 1.0.0
Contact: letstalk@bandwidth.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)




// VerifyCodeResponse struct for VerifyCodeResponse
type VerifyCodeResponse struct {
	// Whether or not the supplied code is valid.
	Valid *bool `json:"valid,omitempty"`
}

// NewVerifyCodeResponse instantiates a new VerifyCodeResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVerifyCodeResponse() *VerifyCodeResponse {
	this := VerifyCodeResponse{}
	return &this
}

// NewVerifyCodeResponseWithDefaults instantiates a new VerifyCodeResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVerifyCodeResponseWithDefaults() *VerifyCodeResponse {
	this := VerifyCodeResponse{}
	return &this
}

// GetValid returns the Valid field value if set, zero value otherwise.
func (o *VerifyCodeResponse) GetValid() bool {
	if o == nil || utils.IsNil(o.Valid) {
		var ret bool
		return ret
	}
	return *o.Valid
}

// GetValidOk returns a tuple with the Valid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerifyCodeResponse) GetValidOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.Valid) {
		return nil, false
	}
	return o.Valid, true
}

// HasValid returns a boolean if a field has been set.
func (o *VerifyCodeResponse) HasValid() bool {
	if o != nil && !utils.IsNil(o.Valid) {
		return true
	}

	return false
}

// SetValid gets a reference to the given bool and assigns it to the Valid field.
func (o *VerifyCodeResponse) SetValid(v bool) {
	o.Valid = &v
}

func (o VerifyCodeResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VerifyCodeResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Valid) {
		toSerialize["valid"] = o.Valid
	}
	return toSerialize, nil
}

type NullableVerifyCodeResponse struct {
	value *VerifyCodeResponse
	isSet bool
}

func (v NullableVerifyCodeResponse) Get() *VerifyCodeResponse {
	return v.value
}

func (v *NullableVerifyCodeResponse) Set(val *VerifyCodeResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableVerifyCodeResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableVerifyCodeResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVerifyCodeResponse(val *VerifyCodeResponse) *NullableVerifyCodeResponse {
	return &NullableVerifyCodeResponse{value: val, isSet: true}
}

func (v NullableVerifyCodeResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVerifyCodeResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


