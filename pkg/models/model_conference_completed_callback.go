/*
Bandwidth

Bandwidth's Communication APIs

API version: 1.0.0
Contact: letstalk@bandwidth.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"time"
)

// ConferenceCompletedCallback The Conference Completed event is fired when the last member leaves the conference. The response to this event may not contain BXML.
type ConferenceCompletedCallback struct {
	// The event type, value can be one of the following: answer, bridgeComplete, bridgeTargetComplete, conferenceCreated, conferenceRedirect, conferenceMemberJoin, conferenceMemberExit, conferenceCompleted, conferenceRecordingAvailable, disconnect, dtmf, gather, initiate, machineDetectionComplete, recordingComplete, recordingAvailable, redirect, transcriptionAvailable, transferAnswer, transferComplete, transferDisconnect.
	EventType *string `json:"eventType,omitempty"`
	// The approximate UTC date and time when the event was generated by the Bandwidth server, in ISO 8601 format. This may not be exactly the time of event execution.
	EventTime *time.Time `json:"eventTime,omitempty"`
	// The unique, Bandwidth-generated ID of the conference that was recorded
	ConferenceId *string `json:"conferenceId,omitempty"`
	// The user-specified name of the conference that was recorded
	Name *string `json:"name,omitempty"`
	// (optional) The tag specified on call creation. If no tag was specified or it was previously cleared, this field will not be present.
	Tag utils.NullableString `json:"tag,omitempty"`
}

// NewConferenceCompletedCallback instantiates a new ConferenceCompletedCallback object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConferenceCompletedCallback() *ConferenceCompletedCallback {
	this := ConferenceCompletedCallback{}
	return &this
}

// NewConferenceCompletedCallbackWithDefaults instantiates a new ConferenceCompletedCallback object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConferenceCompletedCallbackWithDefaults() *ConferenceCompletedCallback {
	this := ConferenceCompletedCallback{}
	return &this
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *ConferenceCompletedCallback) GetEventType() string {
	if o == nil || utils.IsNil(o.EventType) {
		var ret string
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceCompletedCallback) GetEventTypeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.EventType) {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *ConferenceCompletedCallback) HasEventType() bool {
	if o != nil && !utils.IsNil(o.EventType) {
		return true
	}

	return false
}

// SetEventType gets a reference to the given string and assigns it to the EventType field.
func (o *ConferenceCompletedCallback) SetEventType(v string) {
	o.EventType = &v
}

// GetEventTime returns the EventTime field value if set, zero value otherwise.
func (o *ConferenceCompletedCallback) GetEventTime() time.Time {
	if o == nil || utils.IsNil(o.EventTime) {
		var ret time.Time
		return ret
	}
	return *o.EventTime
}

// GetEventTimeOk returns a tuple with the EventTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceCompletedCallback) GetEventTimeOk() (*time.Time, bool) {
	if o == nil || utils.IsNil(o.EventTime) {
		return nil, false
	}
	return o.EventTime, true
}

// HasEventTime returns a boolean if a field has been set.
func (o *ConferenceCompletedCallback) HasEventTime() bool {
	if o != nil && !utils.IsNil(o.EventTime) {
		return true
	}

	return false
}

// SetEventTime gets a reference to the given time.Time and assigns it to the EventTime field.
func (o *ConferenceCompletedCallback) SetEventTime(v time.Time) {
	o.EventTime = &v
}

// GetConferenceId returns the ConferenceId field value if set, zero value otherwise.
func (o *ConferenceCompletedCallback) GetConferenceId() string {
	if o == nil || utils.IsNil(o.ConferenceId) {
		var ret string
		return ret
	}
	return *o.ConferenceId
}

// GetConferenceIdOk returns a tuple with the ConferenceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceCompletedCallback) GetConferenceIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ConferenceId) {
		return nil, false
	}
	return o.ConferenceId, true
}

// HasConferenceId returns a boolean if a field has been set.
func (o *ConferenceCompletedCallback) HasConferenceId() bool {
	if o != nil && !utils.IsNil(o.ConferenceId) {
		return true
	}

	return false
}

// SetConferenceId gets a reference to the given string and assigns it to the ConferenceId field.
func (o *ConferenceCompletedCallback) SetConferenceId(v string) {
	o.ConferenceId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ConferenceCompletedCallback) GetName() string {
	if o == nil || utils.IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceCompletedCallback) GetNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ConferenceCompletedCallback) HasName() bool {
	if o != nil && !utils.IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ConferenceCompletedCallback) SetName(v string) {
	o.Name = &v
}

// GetTag returns the Tag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConferenceCompletedCallback) GetTag() string {
	if o == nil || utils.IsNil(o.Tag.Get()) {
		var ret string
		return ret
	}
	return *o.Tag.Get()
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConferenceCompletedCallback) GetTagOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tag.Get(), o.Tag.IsSet()
}

// HasTag returns a boolean if a field has been set.
func (o *ConferenceCompletedCallback) HasTag() bool {
	if o != nil && o.Tag.IsSet() {
		return true
	}

	return false
}

// SetTag gets a reference to the given utils.NullableString and assigns it to the Tag field.
func (o *ConferenceCompletedCallback) SetTag(v string) {
	o.Tag.Set(&v)
}
// SetTagNil sets the value for Tag to be an explicit nil
func (o *ConferenceCompletedCallback) SetTagNil() {
	o.Tag.Set(nil)
}

// UnsetTag ensures that no value is present for Tag, not even an explicit nil
func (o *ConferenceCompletedCallback) UnsetTag() {
	o.Tag.Unset()
}

func (o ConferenceCompletedCallback) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConferenceCompletedCallback) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.EventType) {
		toSerialize["eventType"] = o.EventType
	}
	if !utils.IsNil(o.EventTime) {
		toSerialize["eventTime"] = o.EventTime
	}
	if !utils.IsNil(o.ConferenceId) {
		toSerialize["conferenceId"] = o.ConferenceId
	}
	if !utils.IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if o.Tag.IsSet() {
		toSerialize["tag"] = o.Tag.Get()
	}
	return toSerialize, nil
}

type NullableConferenceCompletedCallback struct {
	value *ConferenceCompletedCallback
	isSet bool
}

func (v NullableConferenceCompletedCallback) Get() *ConferenceCompletedCallback {
	return v.value
}

func (v *NullableConferenceCompletedCallback) Set(val *ConferenceCompletedCallback) {
	v.value = val
	v.isSet = true
}

func (v NullableConferenceCompletedCallback) IsSet() bool {
	return v.isSet
}

func (v *NullableConferenceCompletedCallback) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConferenceCompletedCallback(val *ConferenceCompletedCallback) *NullableConferenceCompletedCallback {
	return &NullableConferenceCompletedCallback{value: val, isSet: true}
}

func (v NullableConferenceCompletedCallback) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConferenceCompletedCallback) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


