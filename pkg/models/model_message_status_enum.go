/*
Bandwidth

Bandwidth's Communication APIs

API version: 1.0.0
Contact: letstalk@bandwidth.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// MessageStatusEnum The status of the message. One of RECEIVED QUEUED SENDING SENT FAILED DELIVERED ACCEPTED UNDELIVERED.
type MessageStatusEnum string

// List of messageStatusEnum
const (
	RECEIVED MessageStatusEnum = "RECEIVED"
	QUEUED MessageStatusEnum = "QUEUED"
	SENDING MessageStatusEnum = "SENDING"
	SENT MessageStatusEnum = "SENT"
	FAILED MessageStatusEnum = "FAILED"
	DELIVERED MessageStatusEnum = "DELIVERED"
	ACCEPTED MessageStatusEnum = "ACCEPTED"
	UNDELIVERED MessageStatusEnum = "UNDELIVERED"
)

// All allowed values of MessageStatusEnum enum
var AllowedMessageStatusEnumEnumValues = []MessageStatusEnum{
	"RECEIVED",
	"QUEUED",
	"SENDING",
	"SENT",
	"FAILED",
	"DELIVERED",
	"ACCEPTED",
	"UNDELIVERED",
}

func (v *MessageStatusEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MessageStatusEnum(value)
	for _, existing := range AllowedMessageStatusEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MessageStatusEnum", value)
}

// NewMessageStatusEnumFromValue returns a pointer to a valid MessageStatusEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMessageStatusEnumFromValue(v string) (*MessageStatusEnum, error) {
	ev := MessageStatusEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MessageStatusEnum: valid values are %v", v, AllowedMessageStatusEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MessageStatusEnum) IsValid() bool {
	for _, existing := range AllowedMessageStatusEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to messageStatusEnum value
func (v MessageStatusEnum) Ptr() *MessageStatusEnum {
	return &v
}

type NullableMessageStatusEnum struct {
	value *MessageStatusEnum
	isSet bool
}

func (v NullableMessageStatusEnum) Get() *MessageStatusEnum {
	return v.value
}

func (v *NullableMessageStatusEnum) Set(val *MessageStatusEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageStatusEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageStatusEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageStatusEnum(val *MessageStatusEnum) *NullableMessageStatusEnum {
	return &NullableMessageStatusEnum{value: val, isSet: true}
}

func (v NullableMessageStatusEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageStatusEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

