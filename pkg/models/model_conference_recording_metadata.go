/*
Bandwidth

Bandwidth's Communication APIs

API version: 1.0.0
Contact: letstalk@bandwidth.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"time"
)

// ConferenceRecordingMetadata struct for ConferenceRecordingMetadata
type ConferenceRecordingMetadata struct {
	// The user account associated with the call.
	AccountId *string `json:"accountId,omitempty"`
	// The unique, Bandwidth-generated ID of the conference that was recorded
	ConferenceId *string `json:"conferenceId,omitempty"`
	// The user-specified name of the conference that was recorded
	Name *string `json:"name,omitempty"`
	// The unique ID of this recording
	RecordingId *string `json:"recordingId,omitempty"`
	// The duration of the recording in ISO-8601 format
	Duration *string `json:"duration,omitempty"`
	// Always `1` for conference recordings; multi-channel recordings are not supported on conferences.
	Channels *int32 `json:"channels,omitempty"`
	// Time the call was started, in ISO 8601 format.
	StartTime *time.Time `json:"startTime,omitempty"`
	// The time that the recording ended in ISO-8601 format
	EndTime *time.Time `json:"endTime,omitempty"`
	FileFormat *FileFormatEnum `json:"fileFormat,omitempty"`
	// The current status of the process. For recording, current possible values are 'processing', 'partial', 'complete', 'deleted', and 'error'. For transcriptions, current possible values are 'none', 'processing', 'available', 'error', 'timeout', 'file-size-too-big', and 'file-size-too-small'. Additional states may be added in the future, so your application must be tolerant of unknown values.
	Status *string `json:"status,omitempty"`
	// The URL that can be used to download the recording. Only present if the recording is finished and may be downloaded.
	MediaUrl utils.NullableString `json:"mediaUrl,omitempty"`
	// A name to identify this recording.
	RecordingName *string `json:"recordingName,omitempty"`
}

// NewConferenceRecordingMetadata instantiates a new ConferenceRecordingMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConferenceRecordingMetadata() *ConferenceRecordingMetadata {
	this := ConferenceRecordingMetadata{}
	return &this
}

// NewConferenceRecordingMetadataWithDefaults instantiates a new ConferenceRecordingMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConferenceRecordingMetadataWithDefaults() *ConferenceRecordingMetadata {
	this := ConferenceRecordingMetadata{}
	return &this
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *ConferenceRecordingMetadata) GetAccountId() string {
	if o == nil || utils.IsNil(o.AccountId) {
		var ret string
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceRecordingMetadata) GetAccountIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *ConferenceRecordingMetadata) HasAccountId() bool {
	if o != nil && !utils.IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given string and assigns it to the AccountId field.
func (o *ConferenceRecordingMetadata) SetAccountId(v string) {
	o.AccountId = &v
}

// GetConferenceId returns the ConferenceId field value if set, zero value otherwise.
func (o *ConferenceRecordingMetadata) GetConferenceId() string {
	if o == nil || utils.IsNil(o.ConferenceId) {
		var ret string
		return ret
	}
	return *o.ConferenceId
}

// GetConferenceIdOk returns a tuple with the ConferenceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceRecordingMetadata) GetConferenceIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ConferenceId) {
		return nil, false
	}
	return o.ConferenceId, true
}

// HasConferenceId returns a boolean if a field has been set.
func (o *ConferenceRecordingMetadata) HasConferenceId() bool {
	if o != nil && !utils.IsNil(o.ConferenceId) {
		return true
	}

	return false
}

// SetConferenceId gets a reference to the given string and assigns it to the ConferenceId field.
func (o *ConferenceRecordingMetadata) SetConferenceId(v string) {
	o.ConferenceId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ConferenceRecordingMetadata) GetName() string {
	if o == nil || utils.IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceRecordingMetadata) GetNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ConferenceRecordingMetadata) HasName() bool {
	if o != nil && !utils.IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ConferenceRecordingMetadata) SetName(v string) {
	o.Name = &v
}

// GetRecordingId returns the RecordingId field value if set, zero value otherwise.
func (o *ConferenceRecordingMetadata) GetRecordingId() string {
	if o == nil || utils.IsNil(o.RecordingId) {
		var ret string
		return ret
	}
	return *o.RecordingId
}

// GetRecordingIdOk returns a tuple with the RecordingId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceRecordingMetadata) GetRecordingIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.RecordingId) {
		return nil, false
	}
	return o.RecordingId, true
}

// HasRecordingId returns a boolean if a field has been set.
func (o *ConferenceRecordingMetadata) HasRecordingId() bool {
	if o != nil && !utils.IsNil(o.RecordingId) {
		return true
	}

	return false
}

// SetRecordingId gets a reference to the given string and assigns it to the RecordingId field.
func (o *ConferenceRecordingMetadata) SetRecordingId(v string) {
	o.RecordingId = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *ConferenceRecordingMetadata) GetDuration() string {
	if o == nil || utils.IsNil(o.Duration) {
		var ret string
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceRecordingMetadata) GetDurationOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Duration) {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *ConferenceRecordingMetadata) HasDuration() bool {
	if o != nil && !utils.IsNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given string and assigns it to the Duration field.
func (o *ConferenceRecordingMetadata) SetDuration(v string) {
	o.Duration = &v
}

// GetChannels returns the Channels field value if set, zero value otherwise.
func (o *ConferenceRecordingMetadata) GetChannels() int32 {
	if o == nil || utils.IsNil(o.Channels) {
		var ret int32
		return ret
	}
	return *o.Channels
}

// GetChannelsOk returns a tuple with the Channels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceRecordingMetadata) GetChannelsOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.Channels) {
		return nil, false
	}
	return o.Channels, true
}

// HasChannels returns a boolean if a field has been set.
func (o *ConferenceRecordingMetadata) HasChannels() bool {
	if o != nil && !utils.IsNil(o.Channels) {
		return true
	}

	return false
}

// SetChannels gets a reference to the given int32 and assigns it to the Channels field.
func (o *ConferenceRecordingMetadata) SetChannels(v int32) {
	o.Channels = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *ConferenceRecordingMetadata) GetStartTime() time.Time {
	if o == nil || utils.IsNil(o.StartTime) {
		var ret time.Time
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceRecordingMetadata) GetStartTimeOk() (*time.Time, bool) {
	if o == nil || utils.IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *ConferenceRecordingMetadata) HasStartTime() bool {
	if o != nil && !utils.IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given time.Time and assigns it to the StartTime field.
func (o *ConferenceRecordingMetadata) SetStartTime(v time.Time) {
	o.StartTime = &v
}

// GetEndTime returns the EndTime field value if set, zero value otherwise.
func (o *ConferenceRecordingMetadata) GetEndTime() time.Time {
	if o == nil || utils.IsNil(o.EndTime) {
		var ret time.Time
		return ret
	}
	return *o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceRecordingMetadata) GetEndTimeOk() (*time.Time, bool) {
	if o == nil || utils.IsNil(o.EndTime) {
		return nil, false
	}
	return o.EndTime, true
}

// HasEndTime returns a boolean if a field has been set.
func (o *ConferenceRecordingMetadata) HasEndTime() bool {
	if o != nil && !utils.IsNil(o.EndTime) {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given time.Time and assigns it to the EndTime field.
func (o *ConferenceRecordingMetadata) SetEndTime(v time.Time) {
	o.EndTime = &v
}

// GetFileFormat returns the FileFormat field value if set, zero value otherwise.
func (o *ConferenceRecordingMetadata) GetFileFormat() FileFormatEnum {
	if o == nil || utils.IsNil(o.FileFormat) {
		var ret FileFormatEnum
		return ret
	}
	return *o.FileFormat
}

// GetFileFormatOk returns a tuple with the FileFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceRecordingMetadata) GetFileFormatOk() (*FileFormatEnum, bool) {
	if o == nil || utils.IsNil(o.FileFormat) {
		return nil, false
	}
	return o.FileFormat, true
}

// HasFileFormat returns a boolean if a field has been set.
func (o *ConferenceRecordingMetadata) HasFileFormat() bool {
	if o != nil && !utils.IsNil(o.FileFormat) {
		return true
	}

	return false
}

// SetFileFormat gets a reference to the given FileFormatEnum and assigns it to the FileFormat field.
func (o *ConferenceRecordingMetadata) SetFileFormat(v FileFormatEnum) {
	o.FileFormat = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ConferenceRecordingMetadata) GetStatus() string {
	if o == nil || utils.IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceRecordingMetadata) GetStatusOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ConferenceRecordingMetadata) HasStatus() bool {
	if o != nil && !utils.IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ConferenceRecordingMetadata) SetStatus(v string) {
	o.Status = &v
}

// GetMediaUrl returns the MediaUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConferenceRecordingMetadata) GetMediaUrl() string {
	if o == nil || utils.IsNil(o.MediaUrl.Get()) {
		var ret string
		return ret
	}
	return *o.MediaUrl.Get()
}

// GetMediaUrlOk returns a tuple with the MediaUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConferenceRecordingMetadata) GetMediaUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MediaUrl.Get(), o.MediaUrl.IsSet()
}

// HasMediaUrl returns a boolean if a field has been set.
func (o *ConferenceRecordingMetadata) HasMediaUrl() bool {
	if o != nil && o.MediaUrl.IsSet() {
		return true
	}

	return false
}

// SetMediaUrl gets a reference to the given utils.NullableString and assigns it to the MediaUrl field.
func (o *ConferenceRecordingMetadata) SetMediaUrl(v string) {
	o.MediaUrl.Set(&v)
}
// SetMediaUrlNil sets the value for MediaUrl to be an explicit nil
func (o *ConferenceRecordingMetadata) SetMediaUrlNil() {
	o.MediaUrl.Set(nil)
}

// UnsetMediaUrl ensures that no value is present for MediaUrl, not even an explicit nil
func (o *ConferenceRecordingMetadata) UnsetMediaUrl() {
	o.MediaUrl.Unset()
}

// GetRecordingName returns the RecordingName field value if set, zero value otherwise.
func (o *ConferenceRecordingMetadata) GetRecordingName() string {
	if o == nil || utils.IsNil(o.RecordingName) {
		var ret string
		return ret
	}
	return *o.RecordingName
}

// GetRecordingNameOk returns a tuple with the RecordingName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceRecordingMetadata) GetRecordingNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.RecordingName) {
		return nil, false
	}
	return o.RecordingName, true
}

// HasRecordingName returns a boolean if a field has been set.
func (o *ConferenceRecordingMetadata) HasRecordingName() bool {
	if o != nil && !utils.IsNil(o.RecordingName) {
		return true
	}

	return false
}

// SetRecordingName gets a reference to the given string and assigns it to the RecordingName field.
func (o *ConferenceRecordingMetadata) SetRecordingName(v string) {
	o.RecordingName = &v
}

func (o ConferenceRecordingMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConferenceRecordingMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.AccountId) {
		toSerialize["accountId"] = o.AccountId
	}
	if !utils.IsNil(o.ConferenceId) {
		toSerialize["conferenceId"] = o.ConferenceId
	}
	if !utils.IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !utils.IsNil(o.RecordingId) {
		toSerialize["recordingId"] = o.RecordingId
	}
	if !utils.IsNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	if !utils.IsNil(o.Channels) {
		toSerialize["channels"] = o.Channels
	}
	if !utils.IsNil(o.StartTime) {
		toSerialize["startTime"] = o.StartTime
	}
	if !utils.IsNil(o.EndTime) {
		toSerialize["endTime"] = o.EndTime
	}
	if !utils.IsNil(o.FileFormat) {
		toSerialize["fileFormat"] = o.FileFormat
	}
	if !utils.IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if o.MediaUrl.IsSet() {
		toSerialize["mediaUrl"] = o.MediaUrl.Get()
	}
	if !utils.IsNil(o.RecordingName) {
		toSerialize["recordingName"] = o.RecordingName
	}
	return toSerialize, nil
}

type NullableConferenceRecordingMetadata struct {
	value *ConferenceRecordingMetadata
	isSet bool
}

func (v NullableConferenceRecordingMetadata) Get() *ConferenceRecordingMetadata {
	return v.value
}

func (v *NullableConferenceRecordingMetadata) Set(val *ConferenceRecordingMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableConferenceRecordingMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableConferenceRecordingMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConferenceRecordingMetadata(val *ConferenceRecordingMetadata) *NullableConferenceRecordingMetadata {
	return &NullableConferenceRecordingMetadata{value: val, isSet: true}
}

func (v NullableConferenceRecordingMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConferenceRecordingMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


