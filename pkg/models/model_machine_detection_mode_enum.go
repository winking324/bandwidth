/*
Bandwidth

Bandwidth's Communication APIs

API version: 1.0.0
Contact: letstalk@bandwidth.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// MachineDetectionModeEnum The machine detection mode. If set to 'async', the detection result will be sent in a 'machineDetectionComplete' callback. If set to 'sync', the 'answer' callback will wait for the machine detection to complete and will include its result.
type MachineDetectionModeEnum string

// List of machineDetectionModeEnum
const (
	SYNC MachineDetectionModeEnum = "sync"
	ASYNC MachineDetectionModeEnum = "async"
)

// All allowed values of MachineDetectionModeEnum enum
var AllowedMachineDetectionModeEnumEnumValues = []MachineDetectionModeEnum{
	"sync",
	"async",
}

func (v *MachineDetectionModeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MachineDetectionModeEnum(value)
	for _, existing := range AllowedMachineDetectionModeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MachineDetectionModeEnum", value)
}

// NewMachineDetectionModeEnumFromValue returns a pointer to a valid MachineDetectionModeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMachineDetectionModeEnumFromValue(v string) (*MachineDetectionModeEnum, error) {
	ev := MachineDetectionModeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MachineDetectionModeEnum: valid values are %v", v, AllowedMachineDetectionModeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MachineDetectionModeEnum) IsValid() bool {
	for _, existing := range AllowedMachineDetectionModeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to machineDetectionModeEnum value
func (v MachineDetectionModeEnum) Ptr() *MachineDetectionModeEnum {
	return &v
}

type NullableMachineDetectionModeEnum struct {
	value *MachineDetectionModeEnum
	isSet bool
}

func (v NullableMachineDetectionModeEnum) Get() *MachineDetectionModeEnum {
	return v.value
}

func (v *NullableMachineDetectionModeEnum) Set(val *MachineDetectionModeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableMachineDetectionModeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableMachineDetectionModeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMachineDetectionModeEnum(val *MachineDetectionModeEnum) *NullableMachineDetectionModeEnum {
	return &NullableMachineDetectionModeEnum{value: val, isSet: true}
}

func (v NullableMachineDetectionModeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMachineDetectionModeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

