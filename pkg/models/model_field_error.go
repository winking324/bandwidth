/*
Bandwidth

Bandwidth's Communication APIs

API version: 1.0.0
Contact: letstalk@bandwidth.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// FieldError struct for FieldError
type FieldError struct {
	// The name of the field that contains the error
	FieldName *string `json:"fieldName,omitempty"`
	// The error associated with the field
	Description *string `json:"description,omitempty"`
}

// NewFieldError instantiates a new FieldError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFieldError() *FieldError {
	this := FieldError{}
	return &this
}

// NewFieldErrorWithDefaults instantiates a new FieldError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFieldErrorWithDefaults() *FieldError {
	this := FieldError{}
	return &this
}

// GetFieldName returns the FieldName field value if set, zero value otherwise.
func (o *FieldError) GetFieldName() string {
	if o == nil || utils.IsNil(o.FieldName) {
		var ret string
		return ret
	}
	return *o.FieldName
}

// GetFieldNameOk returns a tuple with the FieldName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldError) GetFieldNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.FieldName) {
		return nil, false
	}
	return o.FieldName, true
}

// HasFieldName returns a boolean if a field has been set.
func (o *FieldError) HasFieldName() bool {
	if o != nil && !utils.IsNil(o.FieldName) {
		return true
	}

	return false
}

// SetFieldName gets a reference to the given string and assigns it to the FieldName field.
func (o *FieldError) SetFieldName(v string) {
	o.FieldName = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *FieldError) GetDescription() string {
	if o == nil || utils.IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldError) GetDescriptionOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *FieldError) HasDescription() bool {
	if o != nil && !utils.IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *FieldError) SetDescription(v string) {
	o.Description = &v
}

func (o FieldError) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FieldError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.FieldName) {
		toSerialize["fieldName"] = o.FieldName
	}
	if !utils.IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	return toSerialize, nil
}

type NullableFieldError struct {
	value *FieldError
	isSet bool
}

func (v NullableFieldError) Get() *FieldError {
	return v.value
}

func (v *NullableFieldError) Set(val *FieldError) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldError) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldError(val *FieldError) *NullableFieldError {
	return &NullableFieldError{value: val, isSet: true}
}

func (v NullableFieldError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


