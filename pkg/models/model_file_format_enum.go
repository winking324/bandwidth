/*
Bandwidth

Bandwidth's Communication APIs

API version: 1.0.0
Contact: letstalk@bandwidth.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// FileFormatEnum The format that the recording is stored in.
type FileFormatEnum string

// List of fileFormatEnum
const (
	MP3 FileFormatEnum = "mp3"
	WAV FileFormatEnum = "wav"
)

// All allowed values of FileFormatEnum enum
var AllowedFileFormatEnumEnumValues = []FileFormatEnum{
	"mp3",
	"wav",
}

func (v *FileFormatEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FileFormatEnum(value)
	for _, existing := range AllowedFileFormatEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FileFormatEnum", value)
}

// NewFileFormatEnumFromValue returns a pointer to a valid FileFormatEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFileFormatEnumFromValue(v string) (*FileFormatEnum, error) {
	ev := FileFormatEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FileFormatEnum: valid values are %v", v, AllowedFileFormatEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FileFormatEnum) IsValid() bool {
	for _, existing := range AllowedFileFormatEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to fileFormatEnum value
func (v FileFormatEnum) Ptr() *FileFormatEnum {
	return &v
}

type NullableFileFormatEnum struct {
	value *FileFormatEnum
	isSet bool
}

func (v NullableFileFormatEnum) Get() *FileFormatEnum {
	return v.value
}

func (v *NullableFileFormatEnum) Set(val *FileFormatEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableFileFormatEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableFileFormatEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileFormatEnum(val *FileFormatEnum) *NullableFileFormatEnum {
	return &NullableFileFormatEnum{value: val, isSet: true}
}

func (v NullableFileFormatEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileFormatEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

