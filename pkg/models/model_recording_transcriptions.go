/*
Bandwidth

Bandwidth's Communication APIs

API version: 1.0.0
Contact: letstalk@bandwidth.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)




// RecordingTranscriptions struct for RecordingTranscriptions
type RecordingTranscriptions struct {
	Transcripts []Transcription `json:"transcripts,omitempty"`
}

// NewRecordingTranscriptions instantiates a new RecordingTranscriptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecordingTranscriptions() *RecordingTranscriptions {
	this := RecordingTranscriptions{}
	return &this
}

// NewRecordingTranscriptionsWithDefaults instantiates a new RecordingTranscriptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecordingTranscriptionsWithDefaults() *RecordingTranscriptions {
	this := RecordingTranscriptions{}
	return &this
}

// GetTranscripts returns the Transcripts field value if set, zero value otherwise.
func (o *RecordingTranscriptions) GetTranscripts() []Transcription {
	if o == nil || utils.IsNil(o.Transcripts) {
		var ret []Transcription
		return ret
	}
	return o.Transcripts
}

// GetTranscriptsOk returns a tuple with the Transcripts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordingTranscriptions) GetTranscriptsOk() ([]Transcription, bool) {
	if o == nil || utils.IsNil(o.Transcripts) {
		return nil, false
	}
	return o.Transcripts, true
}

// HasTranscripts returns a boolean if a field has been set.
func (o *RecordingTranscriptions) HasTranscripts() bool {
	if o != nil && !utils.IsNil(o.Transcripts) {
		return true
	}

	return false
}

// SetTranscripts gets a reference to the given []Transcription and assigns it to the Transcripts field.
func (o *RecordingTranscriptions) SetTranscripts(v []Transcription) {
	o.Transcripts = v
}

func (o RecordingTranscriptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecordingTranscriptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Transcripts) {
		toSerialize["transcripts"] = o.Transcripts
	}
	return toSerialize, nil
}

type NullableRecordingTranscriptions struct {
	value *RecordingTranscriptions
	isSet bool
}

func (v NullableRecordingTranscriptions) Get() *RecordingTranscriptions {
	return v.value
}

func (v *NullableRecordingTranscriptions) Set(val *RecordingTranscriptions) {
	v.value = val
	v.isSet = true
}

func (v NullableRecordingTranscriptions) IsSet() bool {
	return v.isSet
}

func (v *NullableRecordingTranscriptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecordingTranscriptions(val *RecordingTranscriptions) *NullableRecordingTranscriptions {
	return &NullableRecordingTranscriptions{value: val, isSet: true}
}

func (v NullableRecordingTranscriptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecordingTranscriptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


