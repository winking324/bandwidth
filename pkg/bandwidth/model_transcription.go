/*
Bandwidth

Bandwidth's Communication APIs

API version: 1.0.0
Contact: letstalk@bandwidth.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bandwidth

import (
	"encoding/json"
)

// checks if the Transcription type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Transcription{}

// Transcription struct for Transcription
type Transcription struct {
	// The transcribed text
	Text *string `json:"text,omitempty"`
	// The confidence on the recognized content, ranging from `0.0` to `1.0` with `1.0` being the highest confidence.
	Confidence *float64 `json:"confidence,omitempty"`
}

// NewTranscription instantiates a new Transcription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTranscription() *Transcription {
	this := Transcription{}
	return &this
}

// NewTranscriptionWithDefaults instantiates a new Transcription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTranscriptionWithDefaults() *Transcription {
	this := Transcription{}
	return &this
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *Transcription) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transcription) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *Transcription) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *Transcription) SetText(v string) {
	o.Text = &v
}

// GetConfidence returns the Confidence field value if set, zero value otherwise.
func (o *Transcription) GetConfidence() float64 {
	if o == nil || IsNil(o.Confidence) {
		var ret float64
		return ret
	}
	return *o.Confidence
}

// GetConfidenceOk returns a tuple with the Confidence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transcription) GetConfidenceOk() (*float64, bool) {
	if o == nil || IsNil(o.Confidence) {
		return nil, false
	}
	return o.Confidence, true
}

// HasConfidence returns a boolean if a field has been set.
func (o *Transcription) HasConfidence() bool {
	if o != nil && !IsNil(o.Confidence) {
		return true
	}

	return false
}

// SetConfidence gets a reference to the given float64 and assigns it to the Confidence field.
func (o *Transcription) SetConfidence(v float64) {
	o.Confidence = &v
}

func (o Transcription) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Transcription) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Confidence) {
		toSerialize["confidence"] = o.Confidence
	}
	return toSerialize, nil
}

type NullableTranscription struct {
	value *Transcription
	isSet bool
}

func (v NullableTranscription) Get() *Transcription {
	return v.value
}

func (v *NullableTranscription) Set(val *Transcription) {
	v.value = val
	v.isSet = true
}

func (v NullableTranscription) IsSet() bool {
	return v.isSet
}

func (v *NullableTranscription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTranscription(val *Transcription) *NullableTranscription {
	return &NullableTranscription{value: val, isSet: true}
}

func (v NullableTranscription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTranscription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


