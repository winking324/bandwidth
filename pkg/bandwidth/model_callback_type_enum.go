/*
Bandwidth

Bandwidth's Communication APIs

API version: 1.0.0
Contact: letstalk@bandwidth.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bandwidth

import (
	"encoding/json"
	"fmt"
)

// CallbackTypeEnum Indicates the type of the callback: - `message-received` for inbound callbacks. - One of `message-sending`, `message-delivered`, `message-failed` for status callbacks. 
type CallbackTypeEnum string

// List of callbackTypeEnum
const (
	MESSAGE_RECEIVED CallbackTypeEnum = "message-received"
	MESSAGE_SENDING CallbackTypeEnum = "message-sending"
	MESSAGE_DELIVERED CallbackTypeEnum = "message-delivered"
	MESSAGE_FAILED CallbackTypeEnum = "message-failed"
)

// All allowed values of CallbackTypeEnum enum
var AllowedCallbackTypeEnumEnumValues = []CallbackTypeEnum{
	"message-received",
	"message-sending",
	"message-delivered",
	"message-failed",
}

func (v *CallbackTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CallbackTypeEnum(value)
	for _, existing := range AllowedCallbackTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CallbackTypeEnum", value)
}

// NewCallbackTypeEnumFromValue returns a pointer to a valid CallbackTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCallbackTypeEnumFromValue(v string) (*CallbackTypeEnum, error) {
	ev := CallbackTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CallbackTypeEnum: valid values are %v", v, AllowedCallbackTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CallbackTypeEnum) IsValid() bool {
	for _, existing := range AllowedCallbackTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to callbackTypeEnum value
func (v CallbackTypeEnum) Ptr() *CallbackTypeEnum {
	return &v
}

type NullableCallbackTypeEnum struct {
	value *CallbackTypeEnum
	isSet bool
}

func (v NullableCallbackTypeEnum) Get() *CallbackTypeEnum {
	return v.value
}

func (v *NullableCallbackTypeEnum) Set(val *CallbackTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableCallbackTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableCallbackTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCallbackTypeEnum(val *CallbackTypeEnum) *NullableCallbackTypeEnum {
	return &NullableCallbackTypeEnum{value: val, isSet: true}
}

func (v NullableCallbackTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCallbackTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

