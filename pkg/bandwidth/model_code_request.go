/*
Bandwidth

Bandwidth's Communication APIs

API version: 1.0.0
Contact: letstalk@bandwidth.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bandwidth

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CodeRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CodeRequest{}

// CodeRequest struct for CodeRequest
type CodeRequest struct {
	// The phone number to send the mfa code to.
	To string `json:"to" validate:"regexp=^\\\\+[1-9]\\\\d{1,14}$"`
	// The application phone number, the sender of the mfa code.
	From string `json:"from" validate:"regexp=^\\\\+[1-9]\\\\d{1,14}$"`
	// The application unique ID, obtained from Bandwidth.
	ApplicationId string `json:"applicationId"`
	// An optional field to denote what scope or action the mfa code is addressing.  If not supplied, defaults to \"2FA\".
	Scope *string `json:"scope,omitempty"`
	// The message format of the mfa code.  There are three values that the system will replace \"{CODE}\", \"{NAME}\", \"{SCOPE}\".  The \"{SCOPE}\" and \"{NAME} value template are optional, while \"{CODE}\" must be supplied.  As the name would suggest, code will be replace with the actual mfa code.  Name is replaced with the application name, configured during provisioning of mfa.  The scope value is the same value sent during the call and partitioned by the server.
	Message string `json:"message"`
	// The number of digits for your mfa code.  The valid number ranges from 2 to 8, inclusively.
	Digits int32 `json:"digits"`
}

type _CodeRequest CodeRequest

// NewCodeRequest instantiates a new CodeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCodeRequest(to string, from string, applicationId string, message string, digits int32) *CodeRequest {
	this := CodeRequest{}
	this.To = to
	this.From = from
	this.ApplicationId = applicationId
	this.Message = message
	this.Digits = digits
	return &this
}

// NewCodeRequestWithDefaults instantiates a new CodeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCodeRequestWithDefaults() *CodeRequest {
	this := CodeRequest{}
	return &this
}

// GetTo returns the To field value
func (o *CodeRequest) GetTo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.To
}

// GetToOk returns a tuple with the To field value
// and a boolean to check if the value has been set.
func (o *CodeRequest) GetToOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.To, true
}

// SetTo sets field value
func (o *CodeRequest) SetTo(v string) {
	o.To = v
}

// GetFrom returns the From field value
func (o *CodeRequest) GetFrom() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.From
}

// GetFromOk returns a tuple with the From field value
// and a boolean to check if the value has been set.
func (o *CodeRequest) GetFromOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.From, true
}

// SetFrom sets field value
func (o *CodeRequest) SetFrom(v string) {
	o.From = v
}

// GetApplicationId returns the ApplicationId field value
func (o *CodeRequest) GetApplicationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApplicationId
}

// GetApplicationIdOk returns a tuple with the ApplicationId field value
// and a boolean to check if the value has been set.
func (o *CodeRequest) GetApplicationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApplicationId, true
}

// SetApplicationId sets field value
func (o *CodeRequest) SetApplicationId(v string) {
	o.ApplicationId = v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *CodeRequest) GetScope() string {
	if o == nil || IsNil(o.Scope) {
		var ret string
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodeRequest) GetScopeOk() (*string, bool) {
	if o == nil || IsNil(o.Scope) {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *CodeRequest) HasScope() bool {
	if o != nil && !IsNil(o.Scope) {
		return true
	}

	return false
}

// SetScope gets a reference to the given string and assigns it to the Scope field.
func (o *CodeRequest) SetScope(v string) {
	o.Scope = &v
}

// GetMessage returns the Message field value
func (o *CodeRequest) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *CodeRequest) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *CodeRequest) SetMessage(v string) {
	o.Message = v
}

// GetDigits returns the Digits field value
func (o *CodeRequest) GetDigits() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Digits
}

// GetDigitsOk returns a tuple with the Digits field value
// and a boolean to check if the value has been set.
func (o *CodeRequest) GetDigitsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Digits, true
}

// SetDigits sets field value
func (o *CodeRequest) SetDigits(v int32) {
	o.Digits = v
}

func (o CodeRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CodeRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["to"] = o.To
	toSerialize["from"] = o.From
	toSerialize["applicationId"] = o.ApplicationId
	if !IsNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}
	toSerialize["message"] = o.Message
	toSerialize["digits"] = o.Digits
	return toSerialize, nil
}

func (o *CodeRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"to",
		"from",
		"applicationId",
		"message",
		"digits",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCodeRequest := _CodeRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCodeRequest)

	if err != nil {
		return err
	}

	*o = CodeRequest(varCodeRequest)

	return err
}

type NullableCodeRequest struct {
	value *CodeRequest
	isSet bool
}

func (v NullableCodeRequest) Get() *CodeRequest {
	return v.value
}

func (v *NullableCodeRequest) Set(val *CodeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCodeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCodeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCodeRequest(val *CodeRequest) *NullableCodeRequest {
	return &NullableCodeRequest{value: val, isSet: true}
}

func (v NullableCodeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCodeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


