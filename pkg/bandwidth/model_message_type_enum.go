/*
Bandwidth

Bandwidth's Communication APIs

API version: 1.0.0
Contact: letstalk@bandwidth.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bandwidth

import (
	"encoding/json"
	"fmt"
)

// MessageTypeEnum The type of message. Either SMS or MMS.
type MessageTypeEnum string

// List of messageTypeEnum
const (
	SMS MessageTypeEnum = "sms"
	MMS MessageTypeEnum = "mms"
)

// All allowed values of MessageTypeEnum enum
var AllowedMessageTypeEnumEnumValues = []MessageTypeEnum{
	"sms",
	"mms",
}

func (v *MessageTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MessageTypeEnum(value)
	for _, existing := range AllowedMessageTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MessageTypeEnum", value)
}

// NewMessageTypeEnumFromValue returns a pointer to a valid MessageTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMessageTypeEnumFromValue(v string) (*MessageTypeEnum, error) {
	ev := MessageTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MessageTypeEnum: valid values are %v", v, AllowedMessageTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MessageTypeEnum) IsValid() bool {
	for _, existing := range AllowedMessageTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to messageTypeEnum value
func (v MessageTypeEnum) Ptr() *MessageTypeEnum {
	return &v
}

type NullableMessageTypeEnum struct {
	value *MessageTypeEnum
	isSet bool
}

func (v NullableMessageTypeEnum) Get() *MessageTypeEnum {
	return v.value
}

func (v *NullableMessageTypeEnum) Set(val *MessageTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageTypeEnum(val *MessageTypeEnum) *NullableMessageTypeEnum {
	return &NullableMessageTypeEnum{value: val, isSet: true}
}

func (v NullableMessageTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

