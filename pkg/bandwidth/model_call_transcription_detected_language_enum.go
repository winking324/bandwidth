/*
Bandwidth

Bandwidth's Communication APIs

API version: 1.0.0
Contact: letstalk@bandwidth.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bandwidth

import (
	"encoding/json"
	"fmt"
)

// CallTranscriptionDetectedLanguageEnum The detected language for this transcription.
type CallTranscriptionDetectedLanguageEnum string

// List of callTranscriptionDetectedLanguageEnum
const (
	EN_US CallTranscriptionDetectedLanguageEnum = "en-US"
	ES_US CallTranscriptionDetectedLanguageEnum = "es-US"
	FR_FR CallTranscriptionDetectedLanguageEnum = "fr-FR"
)

// All allowed values of CallTranscriptionDetectedLanguageEnum enum
var AllowedCallTranscriptionDetectedLanguageEnumEnumValues = []CallTranscriptionDetectedLanguageEnum{
	"en-US",
	"es-US",
	"fr-FR",
}

func (v *CallTranscriptionDetectedLanguageEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CallTranscriptionDetectedLanguageEnum(value)
	for _, existing := range AllowedCallTranscriptionDetectedLanguageEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CallTranscriptionDetectedLanguageEnum", value)
}

// NewCallTranscriptionDetectedLanguageEnumFromValue returns a pointer to a valid CallTranscriptionDetectedLanguageEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCallTranscriptionDetectedLanguageEnumFromValue(v string) (*CallTranscriptionDetectedLanguageEnum, error) {
	ev := CallTranscriptionDetectedLanguageEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CallTranscriptionDetectedLanguageEnum: valid values are %v", v, AllowedCallTranscriptionDetectedLanguageEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CallTranscriptionDetectedLanguageEnum) IsValid() bool {
	for _, existing := range AllowedCallTranscriptionDetectedLanguageEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to callTranscriptionDetectedLanguageEnum value
func (v CallTranscriptionDetectedLanguageEnum) Ptr() *CallTranscriptionDetectedLanguageEnum {
	return &v
}

type NullableCallTranscriptionDetectedLanguageEnum struct {
	value *CallTranscriptionDetectedLanguageEnum
	isSet bool
}

func (v NullableCallTranscriptionDetectedLanguageEnum) Get() *CallTranscriptionDetectedLanguageEnum {
	return v.value
}

func (v *NullableCallTranscriptionDetectedLanguageEnum) Set(val *CallTranscriptionDetectedLanguageEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableCallTranscriptionDetectedLanguageEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableCallTranscriptionDetectedLanguageEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCallTranscriptionDetectedLanguageEnum(val *CallTranscriptionDetectedLanguageEnum) *NullableCallTranscriptionDetectedLanguageEnum {
	return &NullableCallTranscriptionDetectedLanguageEnum{value: val, isSet: true}
}

func (v NullableCallTranscriptionDetectedLanguageEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCallTranscriptionDetectedLanguageEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

