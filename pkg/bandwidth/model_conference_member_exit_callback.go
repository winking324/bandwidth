/*
Bandwidth

Bandwidth's Communication APIs

API version: 1.0.0
Contact: letstalk@bandwidth.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bandwidth

import (
	"encoding/json"
	"time"
)

// checks if the ConferenceMemberExitCallback type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConferenceMemberExitCallback{}

// ConferenceMemberExitCallback The Conference Member Exit event is fired whenever a caller exits a conference that specified a callbackUrl. The response may be either empty or a BXML document. Only the following verbs are valid for conferences: PlayAudio, SpeakSentence, StartRecording, StopRecording, PauseRecording, ResumeRecording. Audio verbs will be heard by all members of the conference. Recordings capture audio from all members who are not muted or on hold, as well as any audio verbs that are played into the conference.
type ConferenceMemberExitCallback struct {
	// The event type, value can be one of the following: answer, bridgeComplete, bridgeTargetComplete, conferenceCreated, conferenceRedirect, conferenceMemberJoin, conferenceMemberExit, conferenceCompleted, conferenceRecordingAvailable, disconnect, dtmf, gather, initiate, machineDetectionComplete, recordingComplete, recordingAvailable, redirect, transcriptionAvailable, transferAnswer, transferComplete, transferDisconnect.
	EventType *string `json:"eventType,omitempty"`
	// The approximate UTC date and time when the event was generated by the Bandwidth server, in ISO 8601 format. This may not be exactly the time of event execution.
	EventTime *time.Time `json:"eventTime,omitempty"`
	// The unique, Bandwidth-generated ID of the conference that was recorded
	ConferenceId *string `json:"conferenceId,omitempty"`
	// The user-specified name of the conference that was recorded
	Name *string `json:"name,omitempty"`
	// The provided identifier of the caller. Must be a phone number in E.164 format (e.g. +15555555555).
	From *string `json:"from,omitempty"`
	// The phone number that received the call, in E.164 format (e.g. +15555555555).
	To *string `json:"to,omitempty"`
	// The call id associated with the event.
	CallId *string `json:"callId,omitempty"`
	// (optional) The tag specified on call creation. If no tag was specified or it was previously cleared, this field will not be present.
	Tag NullableString `json:"tag,omitempty"`
}

// NewConferenceMemberExitCallback instantiates a new ConferenceMemberExitCallback object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConferenceMemberExitCallback() *ConferenceMemberExitCallback {
	this := ConferenceMemberExitCallback{}
	return &this
}

// NewConferenceMemberExitCallbackWithDefaults instantiates a new ConferenceMemberExitCallback object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConferenceMemberExitCallbackWithDefaults() *ConferenceMemberExitCallback {
	this := ConferenceMemberExitCallback{}
	return &this
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *ConferenceMemberExitCallback) GetEventType() string {
	if o == nil || IsNil(o.EventType) {
		var ret string
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceMemberExitCallback) GetEventTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EventType) {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *ConferenceMemberExitCallback) HasEventType() bool {
	if o != nil && !IsNil(o.EventType) {
		return true
	}

	return false
}

// SetEventType gets a reference to the given string and assigns it to the EventType field.
func (o *ConferenceMemberExitCallback) SetEventType(v string) {
	o.EventType = &v
}

// GetEventTime returns the EventTime field value if set, zero value otherwise.
func (o *ConferenceMemberExitCallback) GetEventTime() time.Time {
	if o == nil || IsNil(o.EventTime) {
		var ret time.Time
		return ret
	}
	return *o.EventTime
}

// GetEventTimeOk returns a tuple with the EventTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceMemberExitCallback) GetEventTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EventTime) {
		return nil, false
	}
	return o.EventTime, true
}

// HasEventTime returns a boolean if a field has been set.
func (o *ConferenceMemberExitCallback) HasEventTime() bool {
	if o != nil && !IsNil(o.EventTime) {
		return true
	}

	return false
}

// SetEventTime gets a reference to the given time.Time and assigns it to the EventTime field.
func (o *ConferenceMemberExitCallback) SetEventTime(v time.Time) {
	o.EventTime = &v
}

// GetConferenceId returns the ConferenceId field value if set, zero value otherwise.
func (o *ConferenceMemberExitCallback) GetConferenceId() string {
	if o == nil || IsNil(o.ConferenceId) {
		var ret string
		return ret
	}
	return *o.ConferenceId
}

// GetConferenceIdOk returns a tuple with the ConferenceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceMemberExitCallback) GetConferenceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ConferenceId) {
		return nil, false
	}
	return o.ConferenceId, true
}

// HasConferenceId returns a boolean if a field has been set.
func (o *ConferenceMemberExitCallback) HasConferenceId() bool {
	if o != nil && !IsNil(o.ConferenceId) {
		return true
	}

	return false
}

// SetConferenceId gets a reference to the given string and assigns it to the ConferenceId field.
func (o *ConferenceMemberExitCallback) SetConferenceId(v string) {
	o.ConferenceId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ConferenceMemberExitCallback) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceMemberExitCallback) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ConferenceMemberExitCallback) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ConferenceMemberExitCallback) SetName(v string) {
	o.Name = &v
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *ConferenceMemberExitCallback) GetFrom() string {
	if o == nil || IsNil(o.From) {
		var ret string
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceMemberExitCallback) GetFromOk() (*string, bool) {
	if o == nil || IsNil(o.From) {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *ConferenceMemberExitCallback) HasFrom() bool {
	if o != nil && !IsNil(o.From) {
		return true
	}

	return false
}

// SetFrom gets a reference to the given string and assigns it to the From field.
func (o *ConferenceMemberExitCallback) SetFrom(v string) {
	o.From = &v
}

// GetTo returns the To field value if set, zero value otherwise.
func (o *ConferenceMemberExitCallback) GetTo() string {
	if o == nil || IsNil(o.To) {
		var ret string
		return ret
	}
	return *o.To
}

// GetToOk returns a tuple with the To field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceMemberExitCallback) GetToOk() (*string, bool) {
	if o == nil || IsNil(o.To) {
		return nil, false
	}
	return o.To, true
}

// HasTo returns a boolean if a field has been set.
func (o *ConferenceMemberExitCallback) HasTo() bool {
	if o != nil && !IsNil(o.To) {
		return true
	}

	return false
}

// SetTo gets a reference to the given string and assigns it to the To field.
func (o *ConferenceMemberExitCallback) SetTo(v string) {
	o.To = &v
}

// GetCallId returns the CallId field value if set, zero value otherwise.
func (o *ConferenceMemberExitCallback) GetCallId() string {
	if o == nil || IsNil(o.CallId) {
		var ret string
		return ret
	}
	return *o.CallId
}

// GetCallIdOk returns a tuple with the CallId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceMemberExitCallback) GetCallIdOk() (*string, bool) {
	if o == nil || IsNil(o.CallId) {
		return nil, false
	}
	return o.CallId, true
}

// HasCallId returns a boolean if a field has been set.
func (o *ConferenceMemberExitCallback) HasCallId() bool {
	if o != nil && !IsNil(o.CallId) {
		return true
	}

	return false
}

// SetCallId gets a reference to the given string and assigns it to the CallId field.
func (o *ConferenceMemberExitCallback) SetCallId(v string) {
	o.CallId = &v
}

// GetTag returns the Tag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConferenceMemberExitCallback) GetTag() string {
	if o == nil || IsNil(o.Tag.Get()) {
		var ret string
		return ret
	}
	return *o.Tag.Get()
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConferenceMemberExitCallback) GetTagOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tag.Get(), o.Tag.IsSet()
}

// HasTag returns a boolean if a field has been set.
func (o *ConferenceMemberExitCallback) HasTag() bool {
	if o != nil && o.Tag.IsSet() {
		return true
	}

	return false
}

// SetTag gets a reference to the given NullableString and assigns it to the Tag field.
func (o *ConferenceMemberExitCallback) SetTag(v string) {
	o.Tag.Set(&v)
}
// SetTagNil sets the value for Tag to be an explicit nil
func (o *ConferenceMemberExitCallback) SetTagNil() {
	o.Tag.Set(nil)
}

// UnsetTag ensures that no value is present for Tag, not even an explicit nil
func (o *ConferenceMemberExitCallback) UnsetTag() {
	o.Tag.Unset()
}

func (o ConferenceMemberExitCallback) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConferenceMemberExitCallback) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EventType) {
		toSerialize["eventType"] = o.EventType
	}
	if !IsNil(o.EventTime) {
		toSerialize["eventTime"] = o.EventTime
	}
	if !IsNil(o.ConferenceId) {
		toSerialize["conferenceId"] = o.ConferenceId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.From) {
		toSerialize["from"] = o.From
	}
	if !IsNil(o.To) {
		toSerialize["to"] = o.To
	}
	if !IsNil(o.CallId) {
		toSerialize["callId"] = o.CallId
	}
	if o.Tag.IsSet() {
		toSerialize["tag"] = o.Tag.Get()
	}
	return toSerialize, nil
}

type NullableConferenceMemberExitCallback struct {
	value *ConferenceMemberExitCallback
	isSet bool
}

func (v NullableConferenceMemberExitCallback) Get() *ConferenceMemberExitCallback {
	return v.value
}

func (v *NullableConferenceMemberExitCallback) Set(val *ConferenceMemberExitCallback) {
	v.value = val
	v.isSet = true
}

func (v NullableConferenceMemberExitCallback) IsSet() bool {
	return v.isSet
}

func (v *NullableConferenceMemberExitCallback) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConferenceMemberExitCallback(val *ConferenceMemberExitCallback) *NullableConferenceMemberExitCallback {
	return &NullableConferenceMemberExitCallback{value: val, isSet: true}
}

func (v NullableConferenceMemberExitCallback) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConferenceMemberExitCallback) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


