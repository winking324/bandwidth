/*
Bandwidth

Bandwidth's Communication APIs

API version: 1.0.0
Contact: letstalk@bandwidth.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bandwidth

import (
	"encoding/json"
)

// checks if the ConferenceMember type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConferenceMember{}

// ConferenceMember struct for ConferenceMember
type ConferenceMember struct {
	// The call id associated with the event.
	CallId *string `json:"callId,omitempty"`
	// The unique, Bandwidth-generated ID of the conference that was recorded
	ConferenceId *string `json:"conferenceId,omitempty"`
	// A URL that may be used to retrieve information about or update the state of this conference member. This is the URL of this member's [Get Conference Member](/apis/voice/#operation/getConferenceMember) endpoint and [Modify Conference Member](/apis/voice/#operation/updateConferenceMember) endpoint.
	MemberUrl *string `json:"memberUrl,omitempty"`
	// Whether or not this member is currently muted. Members who are muted are still able to hear other participants.  If used in a PUT request, updates this member's mute status. Has no effect if omitted.
	Mute *bool `json:"mute,omitempty"`
	// Whether or not this member is currently on hold. Members who are on hold are not able to hear or speak in the conference.  If used in a PUT request, updates this member's hold status. Has no effect if omitted.
	Hold *bool `json:"hold,omitempty"`
	// If this member had a value set for `callIdsToCoach` in its [Conference](/docs/voice/bxml/conference) verb or this list was added with a previous PUT request to modify the member, this is that list of calls.  If present in a PUT request, modifies the calls that this member is coaching. Has no effect if omitted. See the documentation for the [Conference](/docs/voice/bxml/conference) verb for more details about coaching. Note that this will not add the matching calls to the conference; each call must individually execute a Conference verb to join.
	CallIdsToCoach []string `json:"callIdsToCoach,omitempty"`
}

// NewConferenceMember instantiates a new ConferenceMember object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConferenceMember() *ConferenceMember {
	this := ConferenceMember{}
	return &this
}

// NewConferenceMemberWithDefaults instantiates a new ConferenceMember object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConferenceMemberWithDefaults() *ConferenceMember {
	this := ConferenceMember{}
	return &this
}

// GetCallId returns the CallId field value if set, zero value otherwise.
func (o *ConferenceMember) GetCallId() string {
	if o == nil || IsNil(o.CallId) {
		var ret string
		return ret
	}
	return *o.CallId
}

// GetCallIdOk returns a tuple with the CallId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceMember) GetCallIdOk() (*string, bool) {
	if o == nil || IsNil(o.CallId) {
		return nil, false
	}
	return o.CallId, true
}

// HasCallId returns a boolean if a field has been set.
func (o *ConferenceMember) HasCallId() bool {
	if o != nil && !IsNil(o.CallId) {
		return true
	}

	return false
}

// SetCallId gets a reference to the given string and assigns it to the CallId field.
func (o *ConferenceMember) SetCallId(v string) {
	o.CallId = &v
}

// GetConferenceId returns the ConferenceId field value if set, zero value otherwise.
func (o *ConferenceMember) GetConferenceId() string {
	if o == nil || IsNil(o.ConferenceId) {
		var ret string
		return ret
	}
	return *o.ConferenceId
}

// GetConferenceIdOk returns a tuple with the ConferenceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceMember) GetConferenceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ConferenceId) {
		return nil, false
	}
	return o.ConferenceId, true
}

// HasConferenceId returns a boolean if a field has been set.
func (o *ConferenceMember) HasConferenceId() bool {
	if o != nil && !IsNil(o.ConferenceId) {
		return true
	}

	return false
}

// SetConferenceId gets a reference to the given string and assigns it to the ConferenceId field.
func (o *ConferenceMember) SetConferenceId(v string) {
	o.ConferenceId = &v
}

// GetMemberUrl returns the MemberUrl field value if set, zero value otherwise.
func (o *ConferenceMember) GetMemberUrl() string {
	if o == nil || IsNil(o.MemberUrl) {
		var ret string
		return ret
	}
	return *o.MemberUrl
}

// GetMemberUrlOk returns a tuple with the MemberUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceMember) GetMemberUrlOk() (*string, bool) {
	if o == nil || IsNil(o.MemberUrl) {
		return nil, false
	}
	return o.MemberUrl, true
}

// HasMemberUrl returns a boolean if a field has been set.
func (o *ConferenceMember) HasMemberUrl() bool {
	if o != nil && !IsNil(o.MemberUrl) {
		return true
	}

	return false
}

// SetMemberUrl gets a reference to the given string and assigns it to the MemberUrl field.
func (o *ConferenceMember) SetMemberUrl(v string) {
	o.MemberUrl = &v
}

// GetMute returns the Mute field value if set, zero value otherwise.
func (o *ConferenceMember) GetMute() bool {
	if o == nil || IsNil(o.Mute) {
		var ret bool
		return ret
	}
	return *o.Mute
}

// GetMuteOk returns a tuple with the Mute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceMember) GetMuteOk() (*bool, bool) {
	if o == nil || IsNil(o.Mute) {
		return nil, false
	}
	return o.Mute, true
}

// HasMute returns a boolean if a field has been set.
func (o *ConferenceMember) HasMute() bool {
	if o != nil && !IsNil(o.Mute) {
		return true
	}

	return false
}

// SetMute gets a reference to the given bool and assigns it to the Mute field.
func (o *ConferenceMember) SetMute(v bool) {
	o.Mute = &v
}

// GetHold returns the Hold field value if set, zero value otherwise.
func (o *ConferenceMember) GetHold() bool {
	if o == nil || IsNil(o.Hold) {
		var ret bool
		return ret
	}
	return *o.Hold
}

// GetHoldOk returns a tuple with the Hold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConferenceMember) GetHoldOk() (*bool, bool) {
	if o == nil || IsNil(o.Hold) {
		return nil, false
	}
	return o.Hold, true
}

// HasHold returns a boolean if a field has been set.
func (o *ConferenceMember) HasHold() bool {
	if o != nil && !IsNil(o.Hold) {
		return true
	}

	return false
}

// SetHold gets a reference to the given bool and assigns it to the Hold field.
func (o *ConferenceMember) SetHold(v bool) {
	o.Hold = &v
}

// GetCallIdsToCoach returns the CallIdsToCoach field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConferenceMember) GetCallIdsToCoach() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.CallIdsToCoach
}

// GetCallIdsToCoachOk returns a tuple with the CallIdsToCoach field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConferenceMember) GetCallIdsToCoachOk() ([]string, bool) {
	if o == nil || IsNil(o.CallIdsToCoach) {
		return nil, false
	}
	return o.CallIdsToCoach, true
}

// HasCallIdsToCoach returns a boolean if a field has been set.
func (o *ConferenceMember) HasCallIdsToCoach() bool {
	if o != nil && !IsNil(o.CallIdsToCoach) {
		return true
	}

	return false
}

// SetCallIdsToCoach gets a reference to the given []string and assigns it to the CallIdsToCoach field.
func (o *ConferenceMember) SetCallIdsToCoach(v []string) {
	o.CallIdsToCoach = v
}

func (o ConferenceMember) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConferenceMember) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CallId) {
		toSerialize["callId"] = o.CallId
	}
	if !IsNil(o.ConferenceId) {
		toSerialize["conferenceId"] = o.ConferenceId
	}
	if !IsNil(o.MemberUrl) {
		toSerialize["memberUrl"] = o.MemberUrl
	}
	if !IsNil(o.Mute) {
		toSerialize["mute"] = o.Mute
	}
	if !IsNil(o.Hold) {
		toSerialize["hold"] = o.Hold
	}
	if o.CallIdsToCoach != nil {
		toSerialize["callIdsToCoach"] = o.CallIdsToCoach
	}
	return toSerialize, nil
}

type NullableConferenceMember struct {
	value *ConferenceMember
	isSet bool
}

func (v NullableConferenceMember) Get() *ConferenceMember {
	return v.value
}

func (v *NullableConferenceMember) Set(val *ConferenceMember) {
	v.value = val
	v.isSet = true
}

func (v NullableConferenceMember) IsSet() bool {
	return v.isSet
}

func (v *NullableConferenceMember) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConferenceMember(val *ConferenceMember) *NullableConferenceMember {
	return &NullableConferenceMember{value: val, isSet: true}
}

func (v NullableConferenceMember) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConferenceMember) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


