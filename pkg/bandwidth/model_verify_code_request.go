/*
Bandwidth

Bandwidth's Communication APIs

API version: 1.0.0
Contact: letstalk@bandwidth.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bandwidth

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VerifyCodeRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VerifyCodeRequest{}

// VerifyCodeRequest struct for VerifyCodeRequest
type VerifyCodeRequest struct {
	// The phone number to send the mfa code to.
	To string `json:"to" validate:"regexp=^\\\\+[1-9]\\\\d{1,14}$"`
	// An optional field to denote what scope or action the mfa code is addressing.  If not supplied, defaults to \"2FA\".
	Scope *string `json:"scope,omitempty"`
	// The time period, in minutes, to validate the mfa code.  By setting this to 3 minutes, it will mean any code generated within the last 3 minutes are still valid.  The valid range for expiration time is between 0 and 15 minutes, exclusively and inclusively, respectively.
	ExpirationTimeInMinutes float32 `json:"expirationTimeInMinutes"`
	// The generated mfa code to check if valid.
	Code string `json:"code"`
}

type _VerifyCodeRequest VerifyCodeRequest

// NewVerifyCodeRequest instantiates a new VerifyCodeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVerifyCodeRequest(to string, expirationTimeInMinutes float32, code string) *VerifyCodeRequest {
	this := VerifyCodeRequest{}
	this.To = to
	this.ExpirationTimeInMinutes = expirationTimeInMinutes
	this.Code = code
	return &this
}

// NewVerifyCodeRequestWithDefaults instantiates a new VerifyCodeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVerifyCodeRequestWithDefaults() *VerifyCodeRequest {
	this := VerifyCodeRequest{}
	return &this
}

// GetTo returns the To field value
func (o *VerifyCodeRequest) GetTo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.To
}

// GetToOk returns a tuple with the To field value
// and a boolean to check if the value has been set.
func (o *VerifyCodeRequest) GetToOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.To, true
}

// SetTo sets field value
func (o *VerifyCodeRequest) SetTo(v string) {
	o.To = v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *VerifyCodeRequest) GetScope() string {
	if o == nil || IsNil(o.Scope) {
		var ret string
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerifyCodeRequest) GetScopeOk() (*string, bool) {
	if o == nil || IsNil(o.Scope) {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *VerifyCodeRequest) HasScope() bool {
	if o != nil && !IsNil(o.Scope) {
		return true
	}

	return false
}

// SetScope gets a reference to the given string and assigns it to the Scope field.
func (o *VerifyCodeRequest) SetScope(v string) {
	o.Scope = &v
}

// GetExpirationTimeInMinutes returns the ExpirationTimeInMinutes field value
func (o *VerifyCodeRequest) GetExpirationTimeInMinutes() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ExpirationTimeInMinutes
}

// GetExpirationTimeInMinutesOk returns a tuple with the ExpirationTimeInMinutes field value
// and a boolean to check if the value has been set.
func (o *VerifyCodeRequest) GetExpirationTimeInMinutesOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpirationTimeInMinutes, true
}

// SetExpirationTimeInMinutes sets field value
func (o *VerifyCodeRequest) SetExpirationTimeInMinutes(v float32) {
	o.ExpirationTimeInMinutes = v
}

// GetCode returns the Code field value
func (o *VerifyCodeRequest) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *VerifyCodeRequest) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *VerifyCodeRequest) SetCode(v string) {
	o.Code = v
}

func (o VerifyCodeRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VerifyCodeRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["to"] = o.To
	if !IsNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}
	toSerialize["expirationTimeInMinutes"] = o.ExpirationTimeInMinutes
	toSerialize["code"] = o.Code
	return toSerialize, nil
}

func (o *VerifyCodeRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"to",
		"expirationTimeInMinutes",
		"code",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVerifyCodeRequest := _VerifyCodeRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVerifyCodeRequest)

	if err != nil {
		return err
	}

	*o = VerifyCodeRequest(varVerifyCodeRequest)

	return err
}

type NullableVerifyCodeRequest struct {
	value *VerifyCodeRequest
	isSet bool
}

func (v NullableVerifyCodeRequest) Get() *VerifyCodeRequest {
	return v.value
}

func (v *NullableVerifyCodeRequest) Set(val *VerifyCodeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableVerifyCodeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableVerifyCodeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVerifyCodeRequest(val *VerifyCodeRequest) *NullableVerifyCodeRequest {
	return &NullableVerifyCodeRequest{value: val, isSet: true}
}

func (v NullableVerifyCodeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVerifyCodeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


