/*
Bandwidth

Bandwidth's Communication APIs

API version: 1.0.0
Contact: letstalk@bandwidth.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bandwidth

import (
	"encoding/json"
	"fmt"
)

// CallStateEnum The call state. Possible values:<br>`active` to redirect the call (default)<br>`completed` to hang up the call if it is answered, cancel it if it is an unanswered outbound call, or reject it if it an unanswered inbound call
type CallStateEnum string

// List of callStateEnum
const (
	CallStateActive CallStateEnum = "active"
	CallStateCompleted CallStateEnum = "completed"
)

// All allowed values of CallStateEnum enum
var AllowedCallStateEnumEnumValues = []CallStateEnum{
	"active",
	"completed",
}

func (v *CallStateEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CallStateEnum(value)
	for _, existing := range AllowedCallStateEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CallStateEnum", value)
}

// NewCallStateEnumFromValue returns a pointer to a valid CallStateEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCallStateEnumFromValue(v string) (*CallStateEnum, error) {
	ev := CallStateEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CallStateEnum: valid values are %v", v, AllowedCallStateEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CallStateEnum) IsValid() bool {
	for _, existing := range AllowedCallStateEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to callStateEnum value
func (v CallStateEnum) Ptr() *CallStateEnum {
	return &v
}

type NullableCallStateEnum struct {
	value *CallStateEnum
	isSet bool
}

func (v NullableCallStateEnum) Get() *CallStateEnum {
	return v.value
}

func (v *NullableCallStateEnum) Set(val *CallStateEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableCallStateEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableCallStateEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCallStateEnum(val *CallStateEnum) *NullableCallStateEnum {
	return &NullableCallStateEnum{value: val, isSet: true}
}

func (v NullableCallStateEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCallStateEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

