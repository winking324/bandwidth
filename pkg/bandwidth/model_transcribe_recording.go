/*
Bandwidth

Bandwidth's Communication APIs

API version: 1.0.0
Contact: letstalk@bandwidth.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bandwidth

import (
	"encoding/json"
)

// checks if the TranscribeRecording type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TranscribeRecording{}

// TranscribeRecording struct for TranscribeRecording
type TranscribeRecording struct {
	// The URL to send the [TranscriptionAvailable](/docs/voice/webhooks/transcriptionAvailable) event to. You should not include sensitive or personally-identifiable information in the callbackUrl field! Always use the proper username and password fields for authorization.
	CallbackUrl *string `json:"callbackUrl,omitempty"`
	CallbackMethod NullableCallbackMethodEnum `json:"callbackMethod,omitempty"`
	// Basic auth username.
	Username NullableString `json:"username,omitempty"`
	// Basic auth password.
	Password NullableString `json:"password,omitempty"`
	// (optional) The tag specified on call creation. If no tag was specified or it was previously cleared, this field will not be present.
	Tag NullableString `json:"tag,omitempty"`
	// This is the timeout (in seconds) to use when delivering the webhook to `callbackUrl`. Can be any numeric value (including decimals) between 1 and 25.
	CallbackTimeout NullableFloat64 `json:"callbackTimeout,omitempty"`
	// A boolean value to indicate that the recording may not be in English, and the transcription service will need to detect the dominant language the recording is in and transcribe accordingly. Current supported languages are English, French, and Spanish.
	DetectLanguage NullableBool `json:"detectLanguage,omitempty"`
}

// NewTranscribeRecording instantiates a new TranscribeRecording object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTranscribeRecording() *TranscribeRecording {
	this := TranscribeRecording{}
	var callbackMethod CallbackMethodEnum = CallbackMethodPost
	this.CallbackMethod = *NewNullableCallbackMethodEnum(&callbackMethod)
	var callbackTimeout float64 = 15
	this.CallbackTimeout = *NewNullableFloat64(&callbackTimeout)
	var detectLanguage bool = false
	this.DetectLanguage = *NewNullableBool(&detectLanguage)
	return &this
}

// NewTranscribeRecordingWithDefaults instantiates a new TranscribeRecording object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTranscribeRecordingWithDefaults() *TranscribeRecording {
	this := TranscribeRecording{}
	var callbackMethod CallbackMethodEnum = CallbackMethodPost
	this.CallbackMethod = *NewNullableCallbackMethodEnum(&callbackMethod)
	var callbackTimeout float64 = 15
	this.CallbackTimeout = *NewNullableFloat64(&callbackTimeout)
	var detectLanguage bool = false
	this.DetectLanguage = *NewNullableBool(&detectLanguage)
	return &this
}

// GetCallbackUrl returns the CallbackUrl field value if set, zero value otherwise.
func (o *TranscribeRecording) GetCallbackUrl() string {
	if o == nil || IsNil(o.CallbackUrl) {
		var ret string
		return ret
	}
	return *o.CallbackUrl
}

// GetCallbackUrlOk returns a tuple with the CallbackUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranscribeRecording) GetCallbackUrlOk() (*string, bool) {
	if o == nil || IsNil(o.CallbackUrl) {
		return nil, false
	}
	return o.CallbackUrl, true
}

// HasCallbackUrl returns a boolean if a field has been set.
func (o *TranscribeRecording) HasCallbackUrl() bool {
	if o != nil && !IsNil(o.CallbackUrl) {
		return true
	}

	return false
}

// SetCallbackUrl gets a reference to the given string and assigns it to the CallbackUrl field.
func (o *TranscribeRecording) SetCallbackUrl(v string) {
	o.CallbackUrl = &v
}

// GetCallbackMethod returns the CallbackMethod field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TranscribeRecording) GetCallbackMethod() CallbackMethodEnum {
	if o == nil || IsNil(o.CallbackMethod.Get()) {
		var ret CallbackMethodEnum
		return ret
	}
	return *o.CallbackMethod.Get()
}

// GetCallbackMethodOk returns a tuple with the CallbackMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TranscribeRecording) GetCallbackMethodOk() (*CallbackMethodEnum, bool) {
	if o == nil {
		return nil, false
	}
	return o.CallbackMethod.Get(), o.CallbackMethod.IsSet()
}

// HasCallbackMethod returns a boolean if a field has been set.
func (o *TranscribeRecording) HasCallbackMethod() bool {
	if o != nil && o.CallbackMethod.IsSet() {
		return true
	}

	return false
}

// SetCallbackMethod gets a reference to the given NullableCallbackMethodEnum and assigns it to the CallbackMethod field.
func (o *TranscribeRecording) SetCallbackMethod(v CallbackMethodEnum) {
	o.CallbackMethod.Set(&v)
}
// SetCallbackMethodNil sets the value for CallbackMethod to be an explicit nil
func (o *TranscribeRecording) SetCallbackMethodNil() {
	o.CallbackMethod.Set(nil)
}

// UnsetCallbackMethod ensures that no value is present for CallbackMethod, not even an explicit nil
func (o *TranscribeRecording) UnsetCallbackMethod() {
	o.CallbackMethod.Unset()
}

// GetUsername returns the Username field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TranscribeRecording) GetUsername() string {
	if o == nil || IsNil(o.Username.Get()) {
		var ret string
		return ret
	}
	return *o.Username.Get()
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TranscribeRecording) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Username.Get(), o.Username.IsSet()
}

// HasUsername returns a boolean if a field has been set.
func (o *TranscribeRecording) HasUsername() bool {
	if o != nil && o.Username.IsSet() {
		return true
	}

	return false
}

// SetUsername gets a reference to the given NullableString and assigns it to the Username field.
func (o *TranscribeRecording) SetUsername(v string) {
	o.Username.Set(&v)
}
// SetUsernameNil sets the value for Username to be an explicit nil
func (o *TranscribeRecording) SetUsernameNil() {
	o.Username.Set(nil)
}

// UnsetUsername ensures that no value is present for Username, not even an explicit nil
func (o *TranscribeRecording) UnsetUsername() {
	o.Username.Unset()
}

// GetPassword returns the Password field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TranscribeRecording) GetPassword() string {
	if o == nil || IsNil(o.Password.Get()) {
		var ret string
		return ret
	}
	return *o.Password.Get()
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TranscribeRecording) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Password.Get(), o.Password.IsSet()
}

// HasPassword returns a boolean if a field has been set.
func (o *TranscribeRecording) HasPassword() bool {
	if o != nil && o.Password.IsSet() {
		return true
	}

	return false
}

// SetPassword gets a reference to the given NullableString and assigns it to the Password field.
func (o *TranscribeRecording) SetPassword(v string) {
	o.Password.Set(&v)
}
// SetPasswordNil sets the value for Password to be an explicit nil
func (o *TranscribeRecording) SetPasswordNil() {
	o.Password.Set(nil)
}

// UnsetPassword ensures that no value is present for Password, not even an explicit nil
func (o *TranscribeRecording) UnsetPassword() {
	o.Password.Unset()
}

// GetTag returns the Tag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TranscribeRecording) GetTag() string {
	if o == nil || IsNil(o.Tag.Get()) {
		var ret string
		return ret
	}
	return *o.Tag.Get()
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TranscribeRecording) GetTagOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tag.Get(), o.Tag.IsSet()
}

// HasTag returns a boolean if a field has been set.
func (o *TranscribeRecording) HasTag() bool {
	if o != nil && o.Tag.IsSet() {
		return true
	}

	return false
}

// SetTag gets a reference to the given NullableString and assigns it to the Tag field.
func (o *TranscribeRecording) SetTag(v string) {
	o.Tag.Set(&v)
}
// SetTagNil sets the value for Tag to be an explicit nil
func (o *TranscribeRecording) SetTagNil() {
	o.Tag.Set(nil)
}

// UnsetTag ensures that no value is present for Tag, not even an explicit nil
func (o *TranscribeRecording) UnsetTag() {
	o.Tag.Unset()
}

// GetCallbackTimeout returns the CallbackTimeout field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TranscribeRecording) GetCallbackTimeout() float64 {
	if o == nil || IsNil(o.CallbackTimeout.Get()) {
		var ret float64
		return ret
	}
	return *o.CallbackTimeout.Get()
}

// GetCallbackTimeoutOk returns a tuple with the CallbackTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TranscribeRecording) GetCallbackTimeoutOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.CallbackTimeout.Get(), o.CallbackTimeout.IsSet()
}

// HasCallbackTimeout returns a boolean if a field has been set.
func (o *TranscribeRecording) HasCallbackTimeout() bool {
	if o != nil && o.CallbackTimeout.IsSet() {
		return true
	}

	return false
}

// SetCallbackTimeout gets a reference to the given NullableFloat64 and assigns it to the CallbackTimeout field.
func (o *TranscribeRecording) SetCallbackTimeout(v float64) {
	o.CallbackTimeout.Set(&v)
}
// SetCallbackTimeoutNil sets the value for CallbackTimeout to be an explicit nil
func (o *TranscribeRecording) SetCallbackTimeoutNil() {
	o.CallbackTimeout.Set(nil)
}

// UnsetCallbackTimeout ensures that no value is present for CallbackTimeout, not even an explicit nil
func (o *TranscribeRecording) UnsetCallbackTimeout() {
	o.CallbackTimeout.Unset()
}

// GetDetectLanguage returns the DetectLanguage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TranscribeRecording) GetDetectLanguage() bool {
	if o == nil || IsNil(o.DetectLanguage.Get()) {
		var ret bool
		return ret
	}
	return *o.DetectLanguage.Get()
}

// GetDetectLanguageOk returns a tuple with the DetectLanguage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TranscribeRecording) GetDetectLanguageOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DetectLanguage.Get(), o.DetectLanguage.IsSet()
}

// HasDetectLanguage returns a boolean if a field has been set.
func (o *TranscribeRecording) HasDetectLanguage() bool {
	if o != nil && o.DetectLanguage.IsSet() {
		return true
	}

	return false
}

// SetDetectLanguage gets a reference to the given NullableBool and assigns it to the DetectLanguage field.
func (o *TranscribeRecording) SetDetectLanguage(v bool) {
	o.DetectLanguage.Set(&v)
}
// SetDetectLanguageNil sets the value for DetectLanguage to be an explicit nil
func (o *TranscribeRecording) SetDetectLanguageNil() {
	o.DetectLanguage.Set(nil)
}

// UnsetDetectLanguage ensures that no value is present for DetectLanguage, not even an explicit nil
func (o *TranscribeRecording) UnsetDetectLanguage() {
	o.DetectLanguage.Unset()
}

func (o TranscribeRecording) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TranscribeRecording) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CallbackUrl) {
		toSerialize["callbackUrl"] = o.CallbackUrl
	}
	if o.CallbackMethod.IsSet() {
		toSerialize["callbackMethod"] = o.CallbackMethod.Get()
	}
	if o.Username.IsSet() {
		toSerialize["username"] = o.Username.Get()
	}
	if o.Password.IsSet() {
		toSerialize["password"] = o.Password.Get()
	}
	if o.Tag.IsSet() {
		toSerialize["tag"] = o.Tag.Get()
	}
	if o.CallbackTimeout.IsSet() {
		toSerialize["callbackTimeout"] = o.CallbackTimeout.Get()
	}
	if o.DetectLanguage.IsSet() {
		toSerialize["detectLanguage"] = o.DetectLanguage.Get()
	}
	return toSerialize, nil
}

type NullableTranscribeRecording struct {
	value *TranscribeRecording
	isSet bool
}

func (v NullableTranscribeRecording) Get() *TranscribeRecording {
	return v.value
}

func (v *NullableTranscribeRecording) Set(val *TranscribeRecording) {
	v.value = val
	v.isSet = true
}

func (v NullableTranscribeRecording) IsSet() bool {
	return v.isSet
}

func (v *NullableTranscribeRecording) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTranscribeRecording(val *TranscribeRecording) *NullableTranscribeRecording {
	return &NullableTranscribeRecording{value: val, isSet: true}
}

func (v NullableTranscribeRecording) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTranscribeRecording) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


