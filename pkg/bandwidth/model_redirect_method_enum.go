/*
Bandwidth

Bandwidth's Communication APIs

API version: 1.0.0
Contact: letstalk@bandwidth.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bandwidth

import (
	"encoding/json"
	"fmt"
)

// RedirectMethodEnum The HTTP method to use for the request to `redirectUrl`. GET or POST. Default value is POST.<br><br>Not allowed if `state` is `completed`.
type RedirectMethodEnum string

// List of redirectMethodEnum
const (
	GET RedirectMethodEnum = "GET"
	POST RedirectMethodEnum = "POST"
)

// All allowed values of RedirectMethodEnum enum
var AllowedRedirectMethodEnumEnumValues = []RedirectMethodEnum{
	"GET",
	"POST",
}

func (v *RedirectMethodEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RedirectMethodEnum(value)
	for _, existing := range AllowedRedirectMethodEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RedirectMethodEnum", value)
}

// NewRedirectMethodEnumFromValue returns a pointer to a valid RedirectMethodEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRedirectMethodEnumFromValue(v string) (*RedirectMethodEnum, error) {
	ev := RedirectMethodEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RedirectMethodEnum: valid values are %v", v, AllowedRedirectMethodEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RedirectMethodEnum) IsValid() bool {
	for _, existing := range AllowedRedirectMethodEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to redirectMethodEnum value
func (v RedirectMethodEnum) Ptr() *RedirectMethodEnum {
	return &v
}

type NullableRedirectMethodEnum struct {
	value *RedirectMethodEnum
	isSet bool
}

func (v NullableRedirectMethodEnum) Get() *RedirectMethodEnum {
	return v.value
}

func (v *NullableRedirectMethodEnum) Set(val *RedirectMethodEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableRedirectMethodEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableRedirectMethodEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRedirectMethodEnum(val *RedirectMethodEnum) *NullableRedirectMethodEnum {
	return &NullableRedirectMethodEnum{value: val, isSet: true}
}

func (v NullableRedirectMethodEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRedirectMethodEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

