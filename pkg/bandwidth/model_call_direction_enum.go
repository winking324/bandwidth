/*
Bandwidth

Bandwidth's Communication APIs

API version: 1.0.0
Contact: letstalk@bandwidth.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bandwidth

import (
	"encoding/json"
	"fmt"
)

// CallDirectionEnum The direction of the call.
type CallDirectionEnum string

// List of callDirectionEnum
const (
	CallDirectionInbound CallDirectionEnum = "inbound"
	CallDirectionOutbound CallDirectionEnum = "outbound"
)

// All allowed values of CallDirectionEnum enum
var AllowedCallDirectionEnumEnumValues = []CallDirectionEnum{
	"inbound",
	"outbound",
}

func (v *CallDirectionEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CallDirectionEnum(value)
	for _, existing := range AllowedCallDirectionEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CallDirectionEnum", value)
}

// NewCallDirectionEnumFromValue returns a pointer to a valid CallDirectionEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCallDirectionEnumFromValue(v string) (*CallDirectionEnum, error) {
	ev := CallDirectionEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CallDirectionEnum: valid values are %v", v, AllowedCallDirectionEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CallDirectionEnum) IsValid() bool {
	for _, existing := range AllowedCallDirectionEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to callDirectionEnum value
func (v CallDirectionEnum) Ptr() *CallDirectionEnum {
	return &v
}

type NullableCallDirectionEnum struct {
	value *CallDirectionEnum
	isSet bool
}

func (v NullableCallDirectionEnum) Get() *CallDirectionEnum {
	return v.value
}

func (v *NullableCallDirectionEnum) Set(val *CallDirectionEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableCallDirectionEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableCallDirectionEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCallDirectionEnum(val *CallDirectionEnum) *NullableCallDirectionEnum {
	return &NullableCallDirectionEnum{value: val, isSet: true}
}

func (v NullableCallDirectionEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCallDirectionEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

