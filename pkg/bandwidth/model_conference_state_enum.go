/*
Bandwidth

Bandwidth's Communication APIs

API version: 1.0.0
Contact: letstalk@bandwidth.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bandwidth

import (
	"encoding/json"
	"fmt"
)

// ConferenceStateEnum Setting the conference state to `completed` ends the conference and ejects all members.
type ConferenceStateEnum string

// List of conferenceStateEnum
const (
	ACTIVE ConferenceStateEnum = "active"
	COMPLETED ConferenceStateEnum = "completed"
)

// All allowed values of ConferenceStateEnum enum
var AllowedConferenceStateEnumEnumValues = []ConferenceStateEnum{
	"active",
	"completed",
}

func (v *ConferenceStateEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ConferenceStateEnum(value)
	for _, existing := range AllowedConferenceStateEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ConferenceStateEnum", value)
}

// NewConferenceStateEnumFromValue returns a pointer to a valid ConferenceStateEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConferenceStateEnumFromValue(v string) (*ConferenceStateEnum, error) {
	ev := ConferenceStateEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ConferenceStateEnum: valid values are %v", v, AllowedConferenceStateEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConferenceStateEnum) IsValid() bool {
	for _, existing := range AllowedConferenceStateEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to conferenceStateEnum value
func (v ConferenceStateEnum) Ptr() *ConferenceStateEnum {
	return &v
}

type NullableConferenceStateEnum struct {
	value *ConferenceStateEnum
	isSet bool
}

func (v NullableConferenceStateEnum) Get() *ConferenceStateEnum {
	return v.value
}

func (v *NullableConferenceStateEnum) Set(val *ConferenceStateEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableConferenceStateEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableConferenceStateEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConferenceStateEnum(val *ConferenceStateEnum) *NullableConferenceStateEnum {
	return &NullableConferenceStateEnum{value: val, isSet: true}
}

func (v NullableConferenceStateEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConferenceStateEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

