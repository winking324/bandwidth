/*
Bandwidth

Bandwidth's Communication APIs

API version: 1.0.0
Contact: letstalk@bandwidth.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bandwidth

import (
	"encoding/json"
)

// checks if the UpdateConferenceMember type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateConferenceMember{}

// UpdateConferenceMember struct for UpdateConferenceMember
type UpdateConferenceMember struct {
	// Whether or not this member is currently muted. Members who are muted are still able to hear other participants.  Updates this member's mute status. Has no effect if omitted.
	Mute *bool `json:"mute,omitempty"`
	// Whether or not this member is currently on hold. Members who are on hold are not able to hear or speak in the conference.  Updates this member's hold status. Has no effect if omitted.
	Hold *bool `json:"hold,omitempty"`
	// If this member had a value set for `callIdsToCoach` in its [Conference](/docs/voice/bxml/conference) verb or this list was added with a previous PUT request to modify the member, this is that list of calls.  Modifies the calls that this member is coaching. Has no effect if omitted. See the documentation for the [Conference](/docs/voice/bxml/conference) verb for more details about coaching.  Note that this will not add the matching calls to the conference; each call must individually execute a Conference verb to join.
	CallIdsToCoach []string `json:"callIdsToCoach,omitempty"`
}

// NewUpdateConferenceMember instantiates a new UpdateConferenceMember object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateConferenceMember() *UpdateConferenceMember {
	this := UpdateConferenceMember{}
	return &this
}

// NewUpdateConferenceMemberWithDefaults instantiates a new UpdateConferenceMember object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateConferenceMemberWithDefaults() *UpdateConferenceMember {
	this := UpdateConferenceMember{}
	return &this
}

// GetMute returns the Mute field value if set, zero value otherwise.
func (o *UpdateConferenceMember) GetMute() bool {
	if o == nil || IsNil(o.Mute) {
		var ret bool
		return ret
	}
	return *o.Mute
}

// GetMuteOk returns a tuple with the Mute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateConferenceMember) GetMuteOk() (*bool, bool) {
	if o == nil || IsNil(o.Mute) {
		return nil, false
	}
	return o.Mute, true
}

// HasMute returns a boolean if a field has been set.
func (o *UpdateConferenceMember) HasMute() bool {
	if o != nil && !IsNil(o.Mute) {
		return true
	}

	return false
}

// SetMute gets a reference to the given bool and assigns it to the Mute field.
func (o *UpdateConferenceMember) SetMute(v bool) {
	o.Mute = &v
}

// GetHold returns the Hold field value if set, zero value otherwise.
func (o *UpdateConferenceMember) GetHold() bool {
	if o == nil || IsNil(o.Hold) {
		var ret bool
		return ret
	}
	return *o.Hold
}

// GetHoldOk returns a tuple with the Hold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateConferenceMember) GetHoldOk() (*bool, bool) {
	if o == nil || IsNil(o.Hold) {
		return nil, false
	}
	return o.Hold, true
}

// HasHold returns a boolean if a field has been set.
func (o *UpdateConferenceMember) HasHold() bool {
	if o != nil && !IsNil(o.Hold) {
		return true
	}

	return false
}

// SetHold gets a reference to the given bool and assigns it to the Hold field.
func (o *UpdateConferenceMember) SetHold(v bool) {
	o.Hold = &v
}

// GetCallIdsToCoach returns the CallIdsToCoach field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateConferenceMember) GetCallIdsToCoach() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.CallIdsToCoach
}

// GetCallIdsToCoachOk returns a tuple with the CallIdsToCoach field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateConferenceMember) GetCallIdsToCoachOk() ([]string, bool) {
	if o == nil || IsNil(o.CallIdsToCoach) {
		return nil, false
	}
	return o.CallIdsToCoach, true
}

// HasCallIdsToCoach returns a boolean if a field has been set.
func (o *UpdateConferenceMember) HasCallIdsToCoach() bool {
	if o != nil && !IsNil(o.CallIdsToCoach) {
		return true
	}

	return false
}

// SetCallIdsToCoach gets a reference to the given []string and assigns it to the CallIdsToCoach field.
func (o *UpdateConferenceMember) SetCallIdsToCoach(v []string) {
	o.CallIdsToCoach = v
}

func (o UpdateConferenceMember) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateConferenceMember) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Mute) {
		toSerialize["mute"] = o.Mute
	}
	if !IsNil(o.Hold) {
		toSerialize["hold"] = o.Hold
	}
	if o.CallIdsToCoach != nil {
		toSerialize["callIdsToCoach"] = o.CallIdsToCoach
	}
	return toSerialize, nil
}

type NullableUpdateConferenceMember struct {
	value *UpdateConferenceMember
	isSet bool
}

func (v NullableUpdateConferenceMember) Get() *UpdateConferenceMember {
	return v.value
}

func (v *NullableUpdateConferenceMember) Set(val *UpdateConferenceMember) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateConferenceMember) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateConferenceMember) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateConferenceMember(val *UpdateConferenceMember) *NullableUpdateConferenceMember {
	return &NullableUpdateConferenceMember{value: val, isSet: true}
}

func (v NullableUpdateConferenceMember) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateConferenceMember) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


