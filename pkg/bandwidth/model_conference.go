/*
Bandwidth

Bandwidth's Communication APIs

API version: 1.0.0
Contact: letstalk@bandwidth.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bandwidth

import (
	"encoding/json"
	"time"
)

// checks if the Conference type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Conference{}

// Conference struct for Conference
type Conference struct {
	// The Bandwidth-generated conference ID.
	Id *string `json:"id,omitempty"`
	// The name of the conference, as specified by your application.
	Name *string `json:"name,omitempty"`
	// The time the conference was initiated, in ISO 8601 format.
	CreatedTime *time.Time `json:"createdTime,omitempty"`
	// The time the conference was terminated, in ISO 8601 format.
	CompletedTime NullableTime `json:"completedTime,omitempty"`
	// The URL to send the conference-related events.
	ConferenceEventUrl NullableString `json:"conferenceEventUrl,omitempty"`
	ConferenceEventMethod NullableCallbackMethodEnum `json:"conferenceEventMethod,omitempty"`
	// The custom string attached to the conference that will be sent with callbacks.
	Tag NullableString `json:"tag,omitempty"`
	// A list of active members of the conference. Omitted if this is a response to the [Get Conferences endpoint](/apis/voice#tag/Conferences/operation/listConferences).
	ActiveMembers []ConferenceMember `json:"activeMembers,omitempty"`
}

// NewConference instantiates a new Conference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConference() *Conference {
	this := Conference{}
	var conferenceEventMethod CallbackMethodEnum = CallbackMethodPost
	this.ConferenceEventMethod = *NewNullableCallbackMethodEnum(&conferenceEventMethod)
	return &this
}

// NewConferenceWithDefaults instantiates a new Conference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConferenceWithDefaults() *Conference {
	this := Conference{}
	var conferenceEventMethod CallbackMethodEnum = CallbackMethodPost
	this.ConferenceEventMethod = *NewNullableCallbackMethodEnum(&conferenceEventMethod)
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Conference) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Conference) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Conference) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Conference) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Conference) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Conference) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Conference) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Conference) SetName(v string) {
	o.Name = &v
}

// GetCreatedTime returns the CreatedTime field value if set, zero value otherwise.
func (o *Conference) GetCreatedTime() time.Time {
	if o == nil || IsNil(o.CreatedTime) {
		var ret time.Time
		return ret
	}
	return *o.CreatedTime
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Conference) GetCreatedTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedTime) {
		return nil, false
	}
	return o.CreatedTime, true
}

// HasCreatedTime returns a boolean if a field has been set.
func (o *Conference) HasCreatedTime() bool {
	if o != nil && !IsNil(o.CreatedTime) {
		return true
	}

	return false
}

// SetCreatedTime gets a reference to the given time.Time and assigns it to the CreatedTime field.
func (o *Conference) SetCreatedTime(v time.Time) {
	o.CreatedTime = &v
}

// GetCompletedTime returns the CompletedTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Conference) GetCompletedTime() time.Time {
	if o == nil || IsNil(o.CompletedTime.Get()) {
		var ret time.Time
		return ret
	}
	return *o.CompletedTime.Get()
}

// GetCompletedTimeOk returns a tuple with the CompletedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Conference) GetCompletedTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.CompletedTime.Get(), o.CompletedTime.IsSet()
}

// HasCompletedTime returns a boolean if a field has been set.
func (o *Conference) HasCompletedTime() bool {
	if o != nil && o.CompletedTime.IsSet() {
		return true
	}

	return false
}

// SetCompletedTime gets a reference to the given NullableTime and assigns it to the CompletedTime field.
func (o *Conference) SetCompletedTime(v time.Time) {
	o.CompletedTime.Set(&v)
}
// SetCompletedTimeNil sets the value for CompletedTime to be an explicit nil
func (o *Conference) SetCompletedTimeNil() {
	o.CompletedTime.Set(nil)
}

// UnsetCompletedTime ensures that no value is present for CompletedTime, not even an explicit nil
func (o *Conference) UnsetCompletedTime() {
	o.CompletedTime.Unset()
}

// GetConferenceEventUrl returns the ConferenceEventUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Conference) GetConferenceEventUrl() string {
	if o == nil || IsNil(o.ConferenceEventUrl.Get()) {
		var ret string
		return ret
	}
	return *o.ConferenceEventUrl.Get()
}

// GetConferenceEventUrlOk returns a tuple with the ConferenceEventUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Conference) GetConferenceEventUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConferenceEventUrl.Get(), o.ConferenceEventUrl.IsSet()
}

// HasConferenceEventUrl returns a boolean if a field has been set.
func (o *Conference) HasConferenceEventUrl() bool {
	if o != nil && o.ConferenceEventUrl.IsSet() {
		return true
	}

	return false
}

// SetConferenceEventUrl gets a reference to the given NullableString and assigns it to the ConferenceEventUrl field.
func (o *Conference) SetConferenceEventUrl(v string) {
	o.ConferenceEventUrl.Set(&v)
}
// SetConferenceEventUrlNil sets the value for ConferenceEventUrl to be an explicit nil
func (o *Conference) SetConferenceEventUrlNil() {
	o.ConferenceEventUrl.Set(nil)
}

// UnsetConferenceEventUrl ensures that no value is present for ConferenceEventUrl, not even an explicit nil
func (o *Conference) UnsetConferenceEventUrl() {
	o.ConferenceEventUrl.Unset()
}

// GetConferenceEventMethod returns the ConferenceEventMethod field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Conference) GetConferenceEventMethod() CallbackMethodEnum {
	if o == nil || IsNil(o.ConferenceEventMethod.Get()) {
		var ret CallbackMethodEnum
		return ret
	}
	return *o.ConferenceEventMethod.Get()
}

// GetConferenceEventMethodOk returns a tuple with the ConferenceEventMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Conference) GetConferenceEventMethodOk() (*CallbackMethodEnum, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConferenceEventMethod.Get(), o.ConferenceEventMethod.IsSet()
}

// HasConferenceEventMethod returns a boolean if a field has been set.
func (o *Conference) HasConferenceEventMethod() bool {
	if o != nil && o.ConferenceEventMethod.IsSet() {
		return true
	}

	return false
}

// SetConferenceEventMethod gets a reference to the given NullableCallbackMethodEnum and assigns it to the ConferenceEventMethod field.
func (o *Conference) SetConferenceEventMethod(v CallbackMethodEnum) {
	o.ConferenceEventMethod.Set(&v)
}
// SetConferenceEventMethodNil sets the value for ConferenceEventMethod to be an explicit nil
func (o *Conference) SetConferenceEventMethodNil() {
	o.ConferenceEventMethod.Set(nil)
}

// UnsetConferenceEventMethod ensures that no value is present for ConferenceEventMethod, not even an explicit nil
func (o *Conference) UnsetConferenceEventMethod() {
	o.ConferenceEventMethod.Unset()
}

// GetTag returns the Tag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Conference) GetTag() string {
	if o == nil || IsNil(o.Tag.Get()) {
		var ret string
		return ret
	}
	return *o.Tag.Get()
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Conference) GetTagOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tag.Get(), o.Tag.IsSet()
}

// HasTag returns a boolean if a field has been set.
func (o *Conference) HasTag() bool {
	if o != nil && o.Tag.IsSet() {
		return true
	}

	return false
}

// SetTag gets a reference to the given NullableString and assigns it to the Tag field.
func (o *Conference) SetTag(v string) {
	o.Tag.Set(&v)
}
// SetTagNil sets the value for Tag to be an explicit nil
func (o *Conference) SetTagNil() {
	o.Tag.Set(nil)
}

// UnsetTag ensures that no value is present for Tag, not even an explicit nil
func (o *Conference) UnsetTag() {
	o.Tag.Unset()
}

// GetActiveMembers returns the ActiveMembers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Conference) GetActiveMembers() []ConferenceMember {
	if o == nil {
		var ret []ConferenceMember
		return ret
	}
	return o.ActiveMembers
}

// GetActiveMembersOk returns a tuple with the ActiveMembers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Conference) GetActiveMembersOk() ([]ConferenceMember, bool) {
	if o == nil || IsNil(o.ActiveMembers) {
		return nil, false
	}
	return o.ActiveMembers, true
}

// HasActiveMembers returns a boolean if a field has been set.
func (o *Conference) HasActiveMembers() bool {
	if o != nil && !IsNil(o.ActiveMembers) {
		return true
	}

	return false
}

// SetActiveMembers gets a reference to the given []ConferenceMember and assigns it to the ActiveMembers field.
func (o *Conference) SetActiveMembers(v []ConferenceMember) {
	o.ActiveMembers = v
}

func (o Conference) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Conference) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.CreatedTime) {
		toSerialize["createdTime"] = o.CreatedTime
	}
	if o.CompletedTime.IsSet() {
		toSerialize["completedTime"] = o.CompletedTime.Get()
	}
	if o.ConferenceEventUrl.IsSet() {
		toSerialize["conferenceEventUrl"] = o.ConferenceEventUrl.Get()
	}
	if o.ConferenceEventMethod.IsSet() {
		toSerialize["conferenceEventMethod"] = o.ConferenceEventMethod.Get()
	}
	if o.Tag.IsSet() {
		toSerialize["tag"] = o.Tag.Get()
	}
	if o.ActiveMembers != nil {
		toSerialize["activeMembers"] = o.ActiveMembers
	}
	return toSerialize, nil
}

type NullableConference struct {
	value *Conference
	isSet bool
}

func (v NullableConference) Get() *Conference {
	return v.value
}

func (v *NullableConference) Set(val *Conference) {
	v.value = val
	v.isSet = true
}

func (v NullableConference) IsSet() bool {
	return v.isSet
}

func (v *NullableConference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConference(val *Conference) *NullableConference {
	return &NullableConference{value: val, isSet: true}
}

func (v NullableConference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


