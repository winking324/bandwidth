/*
Bandwidth

Bandwidth's Communication APIs

API version: 1.0.0
Contact: letstalk@bandwidth.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bandwidth

import (
	"encoding/json"
	"time"
)

// checks if the CallState type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CallState{}

// CallState struct for CallState
type CallState struct {
	// The application id associated with the call.
	ApplicationId *string `json:"applicationId,omitempty"`
	// The account id associated with the call.
	AccountId *string `json:"accountId,omitempty"`
	// The programmable voice API call ID.
	CallId *string `json:"callId,omitempty"`
	// The A-leg call id, set only if this call is the B-leg of a [`<Transfer>`](/docs/voice/bxml/transfer).
	ParentCallId NullableString `json:"parentCallId,omitempty"`
	// The phone number that received the call, in E.164 format (e.g. +15555555555), or if the call was to a SIP URI, the SIP URI.
	To *string `json:"to,omitempty"`
	// The phone number that made the call, in E.164 format (e.g. +15555555555).
	From *string `json:"from,omitempty"`
	Direction *CallDirectionEnum `json:"direction,omitempty"`
	// The current state of the call. Current possible values are `queued`, `initiated`, `answered` and `disconnected`. Additional states may be added in the future, so your application must be tolerant of unknown values.
	State *string `json:"state,omitempty"`
	// For inbound calls, the Bandwidth STIR/SHAKEN implementation will verify the information provided in the inbound invite request `Identity` header. The verification status is stored in the call state `stirShaken` property as follows.  | Property          | Description | |:------------------|:------------| | verstat | (optional) The verification status indicating whether the verification was successful or not. Possible values are `TN-Verification-Passed` or `TN-Verification-Failed`. | | attestationIndicator | (optional) The attestation level verified by Bandwidth. Possible values are `A` (full), `B` (partial) or `C` (gateway). | | originatingId | (optional) A unique origination identifier. |  Note that these are common properties but that the `stirShaken` object is free form and can contain other key-value pairs.  More information: [Understanding STIR/SHAKEN](https://www.bandwidth.com/regulations/stir-shaken).
	StirShaken map[string]string `json:"stirShaken,omitempty"`
	// The value of the `Identity` header from the inbound invite request. Only present for inbound calls and if the account is configured to forward this header.
	Identity NullableString `json:"identity,omitempty"`
	// The time this call was placed in queue.
	EnqueuedTime NullableTime `json:"enqueuedTime,omitempty"`
	// The time the call was initiated, in ISO 8601 format. `null` if the call is still in your queue.
	StartTime NullableTime `json:"startTime,omitempty"`
	// Populated once the call has been answered, with the time in ISO 8601 format.
	AnswerTime NullableTime `json:"answerTime,omitempty"`
	// Populated once the call has ended, with the time in ISO 8601 format.
	EndTime NullableTime `json:"endTime,omitempty"`
	// | Cause | Description | |:------|:------------| | `hangup`| One party hung up the call, a [`<Hangup>`](../../bxml/verbs/hangup.md) verb was executed, or there was no more BXML to execute; it indicates that the call ended normally. | | `busy` | Callee was busy. | | `timeout` | Call wasn't answered before the `callTimeout` was reached. | | `cancel` | Call was cancelled by its originator while it was ringing. | | `rejected` | Call was rejected by the callee. | | `callback-error` | BXML callback couldn't be delivered to your callback server. | | `invalid-bxml` | Invalid BXML was returned in response to a callback. | | `application-error` | An unsupported action was tried on the call, e.g. trying to play a .ogg audio. | | `account-limit` | Account rate limits were reached. | | `node-capacity-exceeded` | System maximum capacity was reached. | | `error` | Some error not described in any of the other causes happened on the call. | | `unknown` | Unknown error happened on the call. |  Note: This list is not exhaustive and other values can appear in the future.
	DisconnectCause NullableString `json:"disconnectCause,omitempty"`
	// Populated only if the call ended with an error, with text explaining the reason.
	ErrorMessage NullableString `json:"errorMessage,omitempty"`
	// Populated only if the call ended with an error, with a Bandwidth internal id that references the error event.
	ErrorId NullableString `json:"errorId,omitempty"`
	// The last time the call had a state update, in ISO 8601 format.
	LastUpdate *time.Time `json:"lastUpdate,omitempty"`
}

// NewCallState instantiates a new CallState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCallState() *CallState {
	this := CallState{}
	return &this
}

// NewCallStateWithDefaults instantiates a new CallState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCallStateWithDefaults() *CallState {
	this := CallState{}
	return &this
}

// GetApplicationId returns the ApplicationId field value if set, zero value otherwise.
func (o *CallState) GetApplicationId() string {
	if o == nil || IsNil(o.ApplicationId) {
		var ret string
		return ret
	}
	return *o.ApplicationId
}

// GetApplicationIdOk returns a tuple with the ApplicationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallState) GetApplicationIdOk() (*string, bool) {
	if o == nil || IsNil(o.ApplicationId) {
		return nil, false
	}
	return o.ApplicationId, true
}

// HasApplicationId returns a boolean if a field has been set.
func (o *CallState) HasApplicationId() bool {
	if o != nil && !IsNil(o.ApplicationId) {
		return true
	}

	return false
}

// SetApplicationId gets a reference to the given string and assigns it to the ApplicationId field.
func (o *CallState) SetApplicationId(v string) {
	o.ApplicationId = &v
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *CallState) GetAccountId() string {
	if o == nil || IsNil(o.AccountId) {
		var ret string
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallState) GetAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *CallState) HasAccountId() bool {
	if o != nil && !IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given string and assigns it to the AccountId field.
func (o *CallState) SetAccountId(v string) {
	o.AccountId = &v
}

// GetCallId returns the CallId field value if set, zero value otherwise.
func (o *CallState) GetCallId() string {
	if o == nil || IsNil(o.CallId) {
		var ret string
		return ret
	}
	return *o.CallId
}

// GetCallIdOk returns a tuple with the CallId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallState) GetCallIdOk() (*string, bool) {
	if o == nil || IsNil(o.CallId) {
		return nil, false
	}
	return o.CallId, true
}

// HasCallId returns a boolean if a field has been set.
func (o *CallState) HasCallId() bool {
	if o != nil && !IsNil(o.CallId) {
		return true
	}

	return false
}

// SetCallId gets a reference to the given string and assigns it to the CallId field.
func (o *CallState) SetCallId(v string) {
	o.CallId = &v
}

// GetParentCallId returns the ParentCallId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CallState) GetParentCallId() string {
	if o == nil || IsNil(o.ParentCallId.Get()) {
		var ret string
		return ret
	}
	return *o.ParentCallId.Get()
}

// GetParentCallIdOk returns a tuple with the ParentCallId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CallState) GetParentCallIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ParentCallId.Get(), o.ParentCallId.IsSet()
}

// HasParentCallId returns a boolean if a field has been set.
func (o *CallState) HasParentCallId() bool {
	if o != nil && o.ParentCallId.IsSet() {
		return true
	}

	return false
}

// SetParentCallId gets a reference to the given NullableString and assigns it to the ParentCallId field.
func (o *CallState) SetParentCallId(v string) {
	o.ParentCallId.Set(&v)
}
// SetParentCallIdNil sets the value for ParentCallId to be an explicit nil
func (o *CallState) SetParentCallIdNil() {
	o.ParentCallId.Set(nil)
}

// UnsetParentCallId ensures that no value is present for ParentCallId, not even an explicit nil
func (o *CallState) UnsetParentCallId() {
	o.ParentCallId.Unset()
}

// GetTo returns the To field value if set, zero value otherwise.
func (o *CallState) GetTo() string {
	if o == nil || IsNil(o.To) {
		var ret string
		return ret
	}
	return *o.To
}

// GetToOk returns a tuple with the To field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallState) GetToOk() (*string, bool) {
	if o == nil || IsNil(o.To) {
		return nil, false
	}
	return o.To, true
}

// HasTo returns a boolean if a field has been set.
func (o *CallState) HasTo() bool {
	if o != nil && !IsNil(o.To) {
		return true
	}

	return false
}

// SetTo gets a reference to the given string and assigns it to the To field.
func (o *CallState) SetTo(v string) {
	o.To = &v
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *CallState) GetFrom() string {
	if o == nil || IsNil(o.From) {
		var ret string
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallState) GetFromOk() (*string, bool) {
	if o == nil || IsNil(o.From) {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *CallState) HasFrom() bool {
	if o != nil && !IsNil(o.From) {
		return true
	}

	return false
}

// SetFrom gets a reference to the given string and assigns it to the From field.
func (o *CallState) SetFrom(v string) {
	o.From = &v
}

// GetDirection returns the Direction field value if set, zero value otherwise.
func (o *CallState) GetDirection() CallDirectionEnum {
	if o == nil || IsNil(o.Direction) {
		var ret CallDirectionEnum
		return ret
	}
	return *o.Direction
}

// GetDirectionOk returns a tuple with the Direction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallState) GetDirectionOk() (*CallDirectionEnum, bool) {
	if o == nil || IsNil(o.Direction) {
		return nil, false
	}
	return o.Direction, true
}

// HasDirection returns a boolean if a field has been set.
func (o *CallState) HasDirection() bool {
	if o != nil && !IsNil(o.Direction) {
		return true
	}

	return false
}

// SetDirection gets a reference to the given CallDirectionEnum and assigns it to the Direction field.
func (o *CallState) SetDirection(v CallDirectionEnum) {
	o.Direction = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *CallState) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallState) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *CallState) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *CallState) SetState(v string) {
	o.State = &v
}

// GetStirShaken returns the StirShaken field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CallState) GetStirShaken() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}
	return o.StirShaken
}

// GetStirShakenOk returns a tuple with the StirShaken field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CallState) GetStirShakenOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.StirShaken) {
		return nil, false
	}
	return &o.StirShaken, true
}

// HasStirShaken returns a boolean if a field has been set.
func (o *CallState) HasStirShaken() bool {
	if o != nil && !IsNil(o.StirShaken) {
		return true
	}

	return false
}

// SetStirShaken gets a reference to the given map[string]string and assigns it to the StirShaken field.
func (o *CallState) SetStirShaken(v map[string]string) {
	o.StirShaken = v
}

// GetIdentity returns the Identity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CallState) GetIdentity() string {
	if o == nil || IsNil(o.Identity.Get()) {
		var ret string
		return ret
	}
	return *o.Identity.Get()
}

// GetIdentityOk returns a tuple with the Identity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CallState) GetIdentityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Identity.Get(), o.Identity.IsSet()
}

// HasIdentity returns a boolean if a field has been set.
func (o *CallState) HasIdentity() bool {
	if o != nil && o.Identity.IsSet() {
		return true
	}

	return false
}

// SetIdentity gets a reference to the given NullableString and assigns it to the Identity field.
func (o *CallState) SetIdentity(v string) {
	o.Identity.Set(&v)
}
// SetIdentityNil sets the value for Identity to be an explicit nil
func (o *CallState) SetIdentityNil() {
	o.Identity.Set(nil)
}

// UnsetIdentity ensures that no value is present for Identity, not even an explicit nil
func (o *CallState) UnsetIdentity() {
	o.Identity.Unset()
}

// GetEnqueuedTime returns the EnqueuedTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CallState) GetEnqueuedTime() time.Time {
	if o == nil || IsNil(o.EnqueuedTime.Get()) {
		var ret time.Time
		return ret
	}
	return *o.EnqueuedTime.Get()
}

// GetEnqueuedTimeOk returns a tuple with the EnqueuedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CallState) GetEnqueuedTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnqueuedTime.Get(), o.EnqueuedTime.IsSet()
}

// HasEnqueuedTime returns a boolean if a field has been set.
func (o *CallState) HasEnqueuedTime() bool {
	if o != nil && o.EnqueuedTime.IsSet() {
		return true
	}

	return false
}

// SetEnqueuedTime gets a reference to the given NullableTime and assigns it to the EnqueuedTime field.
func (o *CallState) SetEnqueuedTime(v time.Time) {
	o.EnqueuedTime.Set(&v)
}
// SetEnqueuedTimeNil sets the value for EnqueuedTime to be an explicit nil
func (o *CallState) SetEnqueuedTimeNil() {
	o.EnqueuedTime.Set(nil)
}

// UnsetEnqueuedTime ensures that no value is present for EnqueuedTime, not even an explicit nil
func (o *CallState) UnsetEnqueuedTime() {
	o.EnqueuedTime.Unset()
}

// GetStartTime returns the StartTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CallState) GetStartTime() time.Time {
	if o == nil || IsNil(o.StartTime.Get()) {
		var ret time.Time
		return ret
	}
	return *o.StartTime.Get()
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CallState) GetStartTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.StartTime.Get(), o.StartTime.IsSet()
}

// HasStartTime returns a boolean if a field has been set.
func (o *CallState) HasStartTime() bool {
	if o != nil && o.StartTime.IsSet() {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given NullableTime and assigns it to the StartTime field.
func (o *CallState) SetStartTime(v time.Time) {
	o.StartTime.Set(&v)
}
// SetStartTimeNil sets the value for StartTime to be an explicit nil
func (o *CallState) SetStartTimeNil() {
	o.StartTime.Set(nil)
}

// UnsetStartTime ensures that no value is present for StartTime, not even an explicit nil
func (o *CallState) UnsetStartTime() {
	o.StartTime.Unset()
}

// GetAnswerTime returns the AnswerTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CallState) GetAnswerTime() time.Time {
	if o == nil || IsNil(o.AnswerTime.Get()) {
		var ret time.Time
		return ret
	}
	return *o.AnswerTime.Get()
}

// GetAnswerTimeOk returns a tuple with the AnswerTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CallState) GetAnswerTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.AnswerTime.Get(), o.AnswerTime.IsSet()
}

// HasAnswerTime returns a boolean if a field has been set.
func (o *CallState) HasAnswerTime() bool {
	if o != nil && o.AnswerTime.IsSet() {
		return true
	}

	return false
}

// SetAnswerTime gets a reference to the given NullableTime and assigns it to the AnswerTime field.
func (o *CallState) SetAnswerTime(v time.Time) {
	o.AnswerTime.Set(&v)
}
// SetAnswerTimeNil sets the value for AnswerTime to be an explicit nil
func (o *CallState) SetAnswerTimeNil() {
	o.AnswerTime.Set(nil)
}

// UnsetAnswerTime ensures that no value is present for AnswerTime, not even an explicit nil
func (o *CallState) UnsetAnswerTime() {
	o.AnswerTime.Unset()
}

// GetEndTime returns the EndTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CallState) GetEndTime() time.Time {
	if o == nil || IsNil(o.EndTime.Get()) {
		var ret time.Time
		return ret
	}
	return *o.EndTime.Get()
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CallState) GetEndTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.EndTime.Get(), o.EndTime.IsSet()
}

// HasEndTime returns a boolean if a field has been set.
func (o *CallState) HasEndTime() bool {
	if o != nil && o.EndTime.IsSet() {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given NullableTime and assigns it to the EndTime field.
func (o *CallState) SetEndTime(v time.Time) {
	o.EndTime.Set(&v)
}
// SetEndTimeNil sets the value for EndTime to be an explicit nil
func (o *CallState) SetEndTimeNil() {
	o.EndTime.Set(nil)
}

// UnsetEndTime ensures that no value is present for EndTime, not even an explicit nil
func (o *CallState) UnsetEndTime() {
	o.EndTime.Unset()
}

// GetDisconnectCause returns the DisconnectCause field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CallState) GetDisconnectCause() string {
	if o == nil || IsNil(o.DisconnectCause.Get()) {
		var ret string
		return ret
	}
	return *o.DisconnectCause.Get()
}

// GetDisconnectCauseOk returns a tuple with the DisconnectCause field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CallState) GetDisconnectCauseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DisconnectCause.Get(), o.DisconnectCause.IsSet()
}

// HasDisconnectCause returns a boolean if a field has been set.
func (o *CallState) HasDisconnectCause() bool {
	if o != nil && o.DisconnectCause.IsSet() {
		return true
	}

	return false
}

// SetDisconnectCause gets a reference to the given NullableString and assigns it to the DisconnectCause field.
func (o *CallState) SetDisconnectCause(v string) {
	o.DisconnectCause.Set(&v)
}
// SetDisconnectCauseNil sets the value for DisconnectCause to be an explicit nil
func (o *CallState) SetDisconnectCauseNil() {
	o.DisconnectCause.Set(nil)
}

// UnsetDisconnectCause ensures that no value is present for DisconnectCause, not even an explicit nil
func (o *CallState) UnsetDisconnectCause() {
	o.DisconnectCause.Unset()
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CallState) GetErrorMessage() string {
	if o == nil || IsNil(o.ErrorMessage.Get()) {
		var ret string
		return ret
	}
	return *o.ErrorMessage.Get()
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CallState) GetErrorMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ErrorMessage.Get(), o.ErrorMessage.IsSet()
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *CallState) HasErrorMessage() bool {
	if o != nil && o.ErrorMessage.IsSet() {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given NullableString and assigns it to the ErrorMessage field.
func (o *CallState) SetErrorMessage(v string) {
	o.ErrorMessage.Set(&v)
}
// SetErrorMessageNil sets the value for ErrorMessage to be an explicit nil
func (o *CallState) SetErrorMessageNil() {
	o.ErrorMessage.Set(nil)
}

// UnsetErrorMessage ensures that no value is present for ErrorMessage, not even an explicit nil
func (o *CallState) UnsetErrorMessage() {
	o.ErrorMessage.Unset()
}

// GetErrorId returns the ErrorId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CallState) GetErrorId() string {
	if o == nil || IsNil(o.ErrorId.Get()) {
		var ret string
		return ret
	}
	return *o.ErrorId.Get()
}

// GetErrorIdOk returns a tuple with the ErrorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CallState) GetErrorIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ErrorId.Get(), o.ErrorId.IsSet()
}

// HasErrorId returns a boolean if a field has been set.
func (o *CallState) HasErrorId() bool {
	if o != nil && o.ErrorId.IsSet() {
		return true
	}

	return false
}

// SetErrorId gets a reference to the given NullableString and assigns it to the ErrorId field.
func (o *CallState) SetErrorId(v string) {
	o.ErrorId.Set(&v)
}
// SetErrorIdNil sets the value for ErrorId to be an explicit nil
func (o *CallState) SetErrorIdNil() {
	o.ErrorId.Set(nil)
}

// UnsetErrorId ensures that no value is present for ErrorId, not even an explicit nil
func (o *CallState) UnsetErrorId() {
	o.ErrorId.Unset()
}

// GetLastUpdate returns the LastUpdate field value if set, zero value otherwise.
func (o *CallState) GetLastUpdate() time.Time {
	if o == nil || IsNil(o.LastUpdate) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdate
}

// GetLastUpdateOk returns a tuple with the LastUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallState) GetLastUpdateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdate) {
		return nil, false
	}
	return o.LastUpdate, true
}

// HasLastUpdate returns a boolean if a field has been set.
func (o *CallState) HasLastUpdate() bool {
	if o != nil && !IsNil(o.LastUpdate) {
		return true
	}

	return false
}

// SetLastUpdate gets a reference to the given time.Time and assigns it to the LastUpdate field.
func (o *CallState) SetLastUpdate(v time.Time) {
	o.LastUpdate = &v
}

func (o CallState) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CallState) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApplicationId) {
		toSerialize["applicationId"] = o.ApplicationId
	}
	if !IsNil(o.AccountId) {
		toSerialize["accountId"] = o.AccountId
	}
	if !IsNil(o.CallId) {
		toSerialize["callId"] = o.CallId
	}
	if o.ParentCallId.IsSet() {
		toSerialize["parentCallId"] = o.ParentCallId.Get()
	}
	if !IsNil(o.To) {
		toSerialize["to"] = o.To
	}
	if !IsNil(o.From) {
		toSerialize["from"] = o.From
	}
	if !IsNil(o.Direction) {
		toSerialize["direction"] = o.Direction
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if o.StirShaken != nil {
		toSerialize["stirShaken"] = o.StirShaken
	}
	if o.Identity.IsSet() {
		toSerialize["identity"] = o.Identity.Get()
	}
	if o.EnqueuedTime.IsSet() {
		toSerialize["enqueuedTime"] = o.EnqueuedTime.Get()
	}
	if o.StartTime.IsSet() {
		toSerialize["startTime"] = o.StartTime.Get()
	}
	if o.AnswerTime.IsSet() {
		toSerialize["answerTime"] = o.AnswerTime.Get()
	}
	if o.EndTime.IsSet() {
		toSerialize["endTime"] = o.EndTime.Get()
	}
	if o.DisconnectCause.IsSet() {
		toSerialize["disconnectCause"] = o.DisconnectCause.Get()
	}
	if o.ErrorMessage.IsSet() {
		toSerialize["errorMessage"] = o.ErrorMessage.Get()
	}
	if o.ErrorId.IsSet() {
		toSerialize["errorId"] = o.ErrorId.Get()
	}
	if !IsNil(o.LastUpdate) {
		toSerialize["lastUpdate"] = o.LastUpdate
	}
	return toSerialize, nil
}

type NullableCallState struct {
	value *CallState
	isSet bool
}

func (v NullableCallState) Get() *CallState {
	return v.value
}

func (v *NullableCallState) Set(val *CallState) {
	v.value = val
	v.isSet = true
}

func (v NullableCallState) IsSet() bool {
	return v.isSet
}

func (v *NullableCallState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCallState(val *CallState) *NullableCallState {
	return &NullableCallState{value: val, isSet: true}
}

func (v NullableCallState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCallState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


