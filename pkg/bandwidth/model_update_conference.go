/*
Bandwidth

Bandwidth's Communication APIs

API version: 1.0.0
Contact: letstalk@bandwidth.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bandwidth

import (
	"encoding/json"
)

// checks if the UpdateConference type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateConference{}

// UpdateConference struct for UpdateConference
type UpdateConference struct {
	Status NullableConferenceStateEnum `json:"status,omitempty"`
	// The URL to send the [conferenceRedirect](/docs/voice/webhooks/conferenceRedirect) event which will provide new BXML. Not allowed if `state` is `completed`, but required if `state` is `active`.
	RedirectUrl NullableString `json:"redirectUrl,omitempty"`
	RedirectMethod NullableRedirectMethodEnum `json:"redirectMethod,omitempty"`
	// Basic auth username.
	Username NullableString `json:"username,omitempty"`
	// Basic auth password.
	Password NullableString `json:"password,omitempty"`
	// A fallback url which, if provided, will be used to retry the `conferenceRedirect` webhook delivery in case `redirectUrl` fails to respond.  Not allowed if `state` is `completed`.
	RedirectFallbackUrl NullableString `json:"redirectFallbackUrl,omitempty"`
	RedirectFallbackMethod NullableRedirectMethodEnum `json:"redirectFallbackMethod,omitempty"`
	// Basic auth username.
	FallbackUsername NullableString `json:"fallbackUsername,omitempty"`
	// Basic auth password.
	FallbackPassword NullableString `json:"fallbackPassword,omitempty"`
}

// NewUpdateConference instantiates a new UpdateConference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateConference() *UpdateConference {
	this := UpdateConference{}
	var status ConferenceStateEnum = ACTIVE
	this.Status = *NewNullableConferenceStateEnum(&status)
	var redirectMethod RedirectMethodEnum = POST
	this.RedirectMethod = *NewNullableRedirectMethodEnum(&redirectMethod)
	var redirectFallbackMethod RedirectMethodEnum = POST
	this.RedirectFallbackMethod = *NewNullableRedirectMethodEnum(&redirectFallbackMethod)
	return &this
}

// NewUpdateConferenceWithDefaults instantiates a new UpdateConference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateConferenceWithDefaults() *UpdateConference {
	this := UpdateConference{}
	var status ConferenceStateEnum = ACTIVE
	this.Status = *NewNullableConferenceStateEnum(&status)
	var redirectMethod RedirectMethodEnum = POST
	this.RedirectMethod = *NewNullableRedirectMethodEnum(&redirectMethod)
	var redirectFallbackMethod RedirectMethodEnum = POST
	this.RedirectFallbackMethod = *NewNullableRedirectMethodEnum(&redirectFallbackMethod)
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateConference) GetStatus() ConferenceStateEnum {
	if o == nil || IsNil(o.Status.Get()) {
		var ret ConferenceStateEnum
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateConference) GetStatusOk() (*ConferenceStateEnum, bool) {
	if o == nil {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *UpdateConference) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableConferenceStateEnum and assigns it to the Status field.
func (o *UpdateConference) SetStatus(v ConferenceStateEnum) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *UpdateConference) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *UpdateConference) UnsetStatus() {
	o.Status.Unset()
}

// GetRedirectUrl returns the RedirectUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateConference) GetRedirectUrl() string {
	if o == nil || IsNil(o.RedirectUrl.Get()) {
		var ret string
		return ret
	}
	return *o.RedirectUrl.Get()
}

// GetRedirectUrlOk returns a tuple with the RedirectUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateConference) GetRedirectUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RedirectUrl.Get(), o.RedirectUrl.IsSet()
}

// HasRedirectUrl returns a boolean if a field has been set.
func (o *UpdateConference) HasRedirectUrl() bool {
	if o != nil && o.RedirectUrl.IsSet() {
		return true
	}

	return false
}

// SetRedirectUrl gets a reference to the given NullableString and assigns it to the RedirectUrl field.
func (o *UpdateConference) SetRedirectUrl(v string) {
	o.RedirectUrl.Set(&v)
}
// SetRedirectUrlNil sets the value for RedirectUrl to be an explicit nil
func (o *UpdateConference) SetRedirectUrlNil() {
	o.RedirectUrl.Set(nil)
}

// UnsetRedirectUrl ensures that no value is present for RedirectUrl, not even an explicit nil
func (o *UpdateConference) UnsetRedirectUrl() {
	o.RedirectUrl.Unset()
}

// GetRedirectMethod returns the RedirectMethod field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateConference) GetRedirectMethod() RedirectMethodEnum {
	if o == nil || IsNil(o.RedirectMethod.Get()) {
		var ret RedirectMethodEnum
		return ret
	}
	return *o.RedirectMethod.Get()
}

// GetRedirectMethodOk returns a tuple with the RedirectMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateConference) GetRedirectMethodOk() (*RedirectMethodEnum, bool) {
	if o == nil {
		return nil, false
	}
	return o.RedirectMethod.Get(), o.RedirectMethod.IsSet()
}

// HasRedirectMethod returns a boolean if a field has been set.
func (o *UpdateConference) HasRedirectMethod() bool {
	if o != nil && o.RedirectMethod.IsSet() {
		return true
	}

	return false
}

// SetRedirectMethod gets a reference to the given NullableRedirectMethodEnum and assigns it to the RedirectMethod field.
func (o *UpdateConference) SetRedirectMethod(v RedirectMethodEnum) {
	o.RedirectMethod.Set(&v)
}
// SetRedirectMethodNil sets the value for RedirectMethod to be an explicit nil
func (o *UpdateConference) SetRedirectMethodNil() {
	o.RedirectMethod.Set(nil)
}

// UnsetRedirectMethod ensures that no value is present for RedirectMethod, not even an explicit nil
func (o *UpdateConference) UnsetRedirectMethod() {
	o.RedirectMethod.Unset()
}

// GetUsername returns the Username field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateConference) GetUsername() string {
	if o == nil || IsNil(o.Username.Get()) {
		var ret string
		return ret
	}
	return *o.Username.Get()
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateConference) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Username.Get(), o.Username.IsSet()
}

// HasUsername returns a boolean if a field has been set.
func (o *UpdateConference) HasUsername() bool {
	if o != nil && o.Username.IsSet() {
		return true
	}

	return false
}

// SetUsername gets a reference to the given NullableString and assigns it to the Username field.
func (o *UpdateConference) SetUsername(v string) {
	o.Username.Set(&v)
}
// SetUsernameNil sets the value for Username to be an explicit nil
func (o *UpdateConference) SetUsernameNil() {
	o.Username.Set(nil)
}

// UnsetUsername ensures that no value is present for Username, not even an explicit nil
func (o *UpdateConference) UnsetUsername() {
	o.Username.Unset()
}

// GetPassword returns the Password field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateConference) GetPassword() string {
	if o == nil || IsNil(o.Password.Get()) {
		var ret string
		return ret
	}
	return *o.Password.Get()
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateConference) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Password.Get(), o.Password.IsSet()
}

// HasPassword returns a boolean if a field has been set.
func (o *UpdateConference) HasPassword() bool {
	if o != nil && o.Password.IsSet() {
		return true
	}

	return false
}

// SetPassword gets a reference to the given NullableString and assigns it to the Password field.
func (o *UpdateConference) SetPassword(v string) {
	o.Password.Set(&v)
}
// SetPasswordNil sets the value for Password to be an explicit nil
func (o *UpdateConference) SetPasswordNil() {
	o.Password.Set(nil)
}

// UnsetPassword ensures that no value is present for Password, not even an explicit nil
func (o *UpdateConference) UnsetPassword() {
	o.Password.Unset()
}

// GetRedirectFallbackUrl returns the RedirectFallbackUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateConference) GetRedirectFallbackUrl() string {
	if o == nil || IsNil(o.RedirectFallbackUrl.Get()) {
		var ret string
		return ret
	}
	return *o.RedirectFallbackUrl.Get()
}

// GetRedirectFallbackUrlOk returns a tuple with the RedirectFallbackUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateConference) GetRedirectFallbackUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RedirectFallbackUrl.Get(), o.RedirectFallbackUrl.IsSet()
}

// HasRedirectFallbackUrl returns a boolean if a field has been set.
func (o *UpdateConference) HasRedirectFallbackUrl() bool {
	if o != nil && o.RedirectFallbackUrl.IsSet() {
		return true
	}

	return false
}

// SetRedirectFallbackUrl gets a reference to the given NullableString and assigns it to the RedirectFallbackUrl field.
func (o *UpdateConference) SetRedirectFallbackUrl(v string) {
	o.RedirectFallbackUrl.Set(&v)
}
// SetRedirectFallbackUrlNil sets the value for RedirectFallbackUrl to be an explicit nil
func (o *UpdateConference) SetRedirectFallbackUrlNil() {
	o.RedirectFallbackUrl.Set(nil)
}

// UnsetRedirectFallbackUrl ensures that no value is present for RedirectFallbackUrl, not even an explicit nil
func (o *UpdateConference) UnsetRedirectFallbackUrl() {
	o.RedirectFallbackUrl.Unset()
}

// GetRedirectFallbackMethod returns the RedirectFallbackMethod field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateConference) GetRedirectFallbackMethod() RedirectMethodEnum {
	if o == nil || IsNil(o.RedirectFallbackMethod.Get()) {
		var ret RedirectMethodEnum
		return ret
	}
	return *o.RedirectFallbackMethod.Get()
}

// GetRedirectFallbackMethodOk returns a tuple with the RedirectFallbackMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateConference) GetRedirectFallbackMethodOk() (*RedirectMethodEnum, bool) {
	if o == nil {
		return nil, false
	}
	return o.RedirectFallbackMethod.Get(), o.RedirectFallbackMethod.IsSet()
}

// HasRedirectFallbackMethod returns a boolean if a field has been set.
func (o *UpdateConference) HasRedirectFallbackMethod() bool {
	if o != nil && o.RedirectFallbackMethod.IsSet() {
		return true
	}

	return false
}

// SetRedirectFallbackMethod gets a reference to the given NullableRedirectMethodEnum and assigns it to the RedirectFallbackMethod field.
func (o *UpdateConference) SetRedirectFallbackMethod(v RedirectMethodEnum) {
	o.RedirectFallbackMethod.Set(&v)
}
// SetRedirectFallbackMethodNil sets the value for RedirectFallbackMethod to be an explicit nil
func (o *UpdateConference) SetRedirectFallbackMethodNil() {
	o.RedirectFallbackMethod.Set(nil)
}

// UnsetRedirectFallbackMethod ensures that no value is present for RedirectFallbackMethod, not even an explicit nil
func (o *UpdateConference) UnsetRedirectFallbackMethod() {
	o.RedirectFallbackMethod.Unset()
}

// GetFallbackUsername returns the FallbackUsername field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateConference) GetFallbackUsername() string {
	if o == nil || IsNil(o.FallbackUsername.Get()) {
		var ret string
		return ret
	}
	return *o.FallbackUsername.Get()
}

// GetFallbackUsernameOk returns a tuple with the FallbackUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateConference) GetFallbackUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FallbackUsername.Get(), o.FallbackUsername.IsSet()
}

// HasFallbackUsername returns a boolean if a field has been set.
func (o *UpdateConference) HasFallbackUsername() bool {
	if o != nil && o.FallbackUsername.IsSet() {
		return true
	}

	return false
}

// SetFallbackUsername gets a reference to the given NullableString and assigns it to the FallbackUsername field.
func (o *UpdateConference) SetFallbackUsername(v string) {
	o.FallbackUsername.Set(&v)
}
// SetFallbackUsernameNil sets the value for FallbackUsername to be an explicit nil
func (o *UpdateConference) SetFallbackUsernameNil() {
	o.FallbackUsername.Set(nil)
}

// UnsetFallbackUsername ensures that no value is present for FallbackUsername, not even an explicit nil
func (o *UpdateConference) UnsetFallbackUsername() {
	o.FallbackUsername.Unset()
}

// GetFallbackPassword returns the FallbackPassword field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateConference) GetFallbackPassword() string {
	if o == nil || IsNil(o.FallbackPassword.Get()) {
		var ret string
		return ret
	}
	return *o.FallbackPassword.Get()
}

// GetFallbackPasswordOk returns a tuple with the FallbackPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateConference) GetFallbackPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FallbackPassword.Get(), o.FallbackPassword.IsSet()
}

// HasFallbackPassword returns a boolean if a field has been set.
func (o *UpdateConference) HasFallbackPassword() bool {
	if o != nil && o.FallbackPassword.IsSet() {
		return true
	}

	return false
}

// SetFallbackPassword gets a reference to the given NullableString and assigns it to the FallbackPassword field.
func (o *UpdateConference) SetFallbackPassword(v string) {
	o.FallbackPassword.Set(&v)
}
// SetFallbackPasswordNil sets the value for FallbackPassword to be an explicit nil
func (o *UpdateConference) SetFallbackPasswordNil() {
	o.FallbackPassword.Set(nil)
}

// UnsetFallbackPassword ensures that no value is present for FallbackPassword, not even an explicit nil
func (o *UpdateConference) UnsetFallbackPassword() {
	o.FallbackPassword.Unset()
}

func (o UpdateConference) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateConference) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	if o.RedirectUrl.IsSet() {
		toSerialize["redirectUrl"] = o.RedirectUrl.Get()
	}
	if o.RedirectMethod.IsSet() {
		toSerialize["redirectMethod"] = o.RedirectMethod.Get()
	}
	if o.Username.IsSet() {
		toSerialize["username"] = o.Username.Get()
	}
	if o.Password.IsSet() {
		toSerialize["password"] = o.Password.Get()
	}
	if o.RedirectFallbackUrl.IsSet() {
		toSerialize["redirectFallbackUrl"] = o.RedirectFallbackUrl.Get()
	}
	if o.RedirectFallbackMethod.IsSet() {
		toSerialize["redirectFallbackMethod"] = o.RedirectFallbackMethod.Get()
	}
	if o.FallbackUsername.IsSet() {
		toSerialize["fallbackUsername"] = o.FallbackUsername.Get()
	}
	if o.FallbackPassword.IsSet() {
		toSerialize["fallbackPassword"] = o.FallbackPassword.Get()
	}
	return toSerialize, nil
}

type NullableUpdateConference struct {
	value *UpdateConference
	isSet bool
}

func (v NullableUpdateConference) Get() *UpdateConference {
	return v.value
}

func (v *NullableUpdateConference) Set(val *UpdateConference) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateConference) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateConference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateConference(val *UpdateConference) *NullableUpdateConference {
	return &NullableUpdateConference{value: val, isSet: true}
}

func (v NullableUpdateConference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateConference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


