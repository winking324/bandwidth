/*
Bandwidth

Bandwidth's Communication APIs

API version: 1.0.0
Contact: letstalk@bandwidth.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bandwidth

import (
	"encoding/json"
	"fmt"
)

// RecordingStateEnum The recording state. Possible values:  `paused` to pause an active recording  `recording` to resume a paused recording
type RecordingStateEnum string

// List of recordingStateEnum
const (
	PAUSED RecordingStateEnum = "paused"
	RECORDING RecordingStateEnum = "recording"
)

// All allowed values of RecordingStateEnum enum
var AllowedRecordingStateEnumEnumValues = []RecordingStateEnum{
	"paused",
	"recording",
}

func (v *RecordingStateEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RecordingStateEnum(value)
	for _, existing := range AllowedRecordingStateEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RecordingStateEnum", value)
}

// NewRecordingStateEnumFromValue returns a pointer to a valid RecordingStateEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRecordingStateEnumFromValue(v string) (*RecordingStateEnum, error) {
	ev := RecordingStateEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RecordingStateEnum: valid values are %v", v, AllowedRecordingStateEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RecordingStateEnum) IsValid() bool {
	for _, existing := range AllowedRecordingStateEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to recordingStateEnum value
func (v RecordingStateEnum) Ptr() *RecordingStateEnum {
	return &v
}

type NullableRecordingStateEnum struct {
	value *RecordingStateEnum
	isSet bool
}

func (v NullableRecordingStateEnum) Get() *RecordingStateEnum {
	return v.value
}

func (v *NullableRecordingStateEnum) Set(val *RecordingStateEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableRecordingStateEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableRecordingStateEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecordingStateEnum(val *RecordingStateEnum) *NullableRecordingStateEnum {
	return &NullableRecordingStateEnum{value: val, isSet: true}
}

func (v NullableRecordingStateEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecordingStateEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

