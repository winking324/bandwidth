/*
Bandwidth

Bandwidth's Communication APIs

API version: 1.0.0
Contact: letstalk@bandwidth.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bandwidth

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the MessageCallback type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MessageCallback{}

// MessageCallback Message Callback Schema
type MessageCallback struct {
	Time time.Time `json:"time"`
	Type CallbackTypeEnum `json:"type"`
	To string `json:"to"`
	// A detailed description of the event described by the callback.
	Description string `json:"description"`
	Message MessageCallbackMessage `json:"message"`
	// Optional error code, applicable only when type is `message-failed`.
	ErrorCode NullableInt32 `json:"errorCode,omitempty"`
}

type _MessageCallback MessageCallback

// NewMessageCallback instantiates a new MessageCallback object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessageCallback(time time.Time, type_ CallbackTypeEnum, to string, description string, message MessageCallbackMessage) *MessageCallback {
	this := MessageCallback{}
	this.Time = time
	this.Type = type_
	this.To = to
	this.Description = description
	this.Message = message
	return &this
}

// NewMessageCallbackWithDefaults instantiates a new MessageCallback object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessageCallbackWithDefaults() *MessageCallback {
	this := MessageCallback{}
	return &this
}

// GetTime returns the Time field value
func (o *MessageCallback) GetTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Time
}

// GetTimeOk returns a tuple with the Time field value
// and a boolean to check if the value has been set.
func (o *MessageCallback) GetTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Time, true
}

// SetTime sets field value
func (o *MessageCallback) SetTime(v time.Time) {
	o.Time = v
}

// GetType returns the Type field value
func (o *MessageCallback) GetType() CallbackTypeEnum {
	if o == nil {
		var ret CallbackTypeEnum
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *MessageCallback) GetTypeOk() (*CallbackTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *MessageCallback) SetType(v CallbackTypeEnum) {
	o.Type = v
}

// GetTo returns the To field value
func (o *MessageCallback) GetTo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.To
}

// GetToOk returns a tuple with the To field value
// and a boolean to check if the value has been set.
func (o *MessageCallback) GetToOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.To, true
}

// SetTo sets field value
func (o *MessageCallback) SetTo(v string) {
	o.To = v
}

// GetDescription returns the Description field value
func (o *MessageCallback) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *MessageCallback) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *MessageCallback) SetDescription(v string) {
	o.Description = v
}

// GetMessage returns the Message field value
func (o *MessageCallback) GetMessage() MessageCallbackMessage {
	if o == nil {
		var ret MessageCallbackMessage
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *MessageCallback) GetMessageOk() (*MessageCallbackMessage, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *MessageCallback) SetMessage(v MessageCallbackMessage) {
	o.Message = v
}

// GetErrorCode returns the ErrorCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MessageCallback) GetErrorCode() int32 {
	if o == nil || IsNil(o.ErrorCode.Get()) {
		var ret int32
		return ret
	}
	return *o.ErrorCode.Get()
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MessageCallback) GetErrorCodeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ErrorCode.Get(), o.ErrorCode.IsSet()
}

// HasErrorCode returns a boolean if a field has been set.
func (o *MessageCallback) HasErrorCode() bool {
	if o != nil && o.ErrorCode.IsSet() {
		return true
	}

	return false
}

// SetErrorCode gets a reference to the given NullableInt32 and assigns it to the ErrorCode field.
func (o *MessageCallback) SetErrorCode(v int32) {
	o.ErrorCode.Set(&v)
}
// SetErrorCodeNil sets the value for ErrorCode to be an explicit nil
func (o *MessageCallback) SetErrorCodeNil() {
	o.ErrorCode.Set(nil)
}

// UnsetErrorCode ensures that no value is present for ErrorCode, not even an explicit nil
func (o *MessageCallback) UnsetErrorCode() {
	o.ErrorCode.Unset()
}

func (o MessageCallback) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MessageCallback) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["time"] = o.Time
	toSerialize["type"] = o.Type
	toSerialize["to"] = o.To
	toSerialize["description"] = o.Description
	toSerialize["message"] = o.Message
	if o.ErrorCode.IsSet() {
		toSerialize["errorCode"] = o.ErrorCode.Get()
	}
	return toSerialize, nil
}

func (o *MessageCallback) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"time",
		"type",
		"to",
		"description",
		"message",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMessageCallback := _MessageCallback{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMessageCallback)

	if err != nil {
		return err
	}

	*o = MessageCallback(varMessageCallback)

	return err
}

type NullableMessageCallback struct {
	value *MessageCallback
	isSet bool
}

func (v NullableMessageCallback) Get() *MessageCallback {
	return v.value
}

func (v *NullableMessageCallback) Set(val *MessageCallback) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageCallback) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageCallback) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageCallback(val *MessageCallback) *NullableMessageCallback {
	return &NullableMessageCallback{value: val, isSet: true}
}

func (v NullableMessageCallback) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageCallback) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


