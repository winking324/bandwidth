/*
Bandwidth

Bandwidth's Communication APIs

API version: 1.0.0
Contact: letstalk@bandwidth.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bandwidth

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the MessageRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MessageRequest{}

// MessageRequest struct for MessageRequest
type MessageRequest struct {
	// The ID of the Application your from number is associated with in the Bandwidth Phone Number Dashboard.
	ApplicationId string `json:"applicationId"`
	// The phone number(s) the message should be sent to in E164 format.
	To []string `json:"to"`
	// Either an alphanumeric sender ID or the sender's Bandwidth phone number in E.164 format, which must be hosted within Bandwidth and linked to the account that is generating the message.  Alphanumeric Sender IDs can contain up to 11 characters, upper-case letters A-Z, lower-case letters a-z, numbers 0-9, space, hyphen -, plus +, underscore _ and ampersand &. Alphanumeric Sender IDs must contain at least one letter.
	From string `json:"from"`
	// The contents of the text message. Must be 2048 characters or less.
	Text *string `json:"text,omitempty"`
	// A list of URLs to include as media attachments as part of the message. Each URL can be at most 4096 characters.
	Media []string `json:"media,omitempty"`
	// A custom string that will be included in callback events of the message. Max 1024 characters.
	Tag *string `json:"tag,omitempty"`
	Priority *PriorityEnum `json:"priority,omitempty"`
	// A string with the date/time value that the message will automatically expire by. This must be a valid RFC-3339 value, e.g., 2021-03-14T01:59:26Z or 2021-03-13T20:59:26-05:00. Must be a date-time in the future. Not supported on MMS.
	Expiration *time.Time `json:"expiration,omitempty"`
}

type _MessageRequest MessageRequest

// NewMessageRequest instantiates a new MessageRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessageRequest(applicationId string, to []string, from string) *MessageRequest {
	this := MessageRequest{}
	this.ApplicationId = applicationId
	this.To = to
	this.From = from
	return &this
}

// NewMessageRequestWithDefaults instantiates a new MessageRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessageRequestWithDefaults() *MessageRequest {
	this := MessageRequest{}
	return &this
}

// GetApplicationId returns the ApplicationId field value
func (o *MessageRequest) GetApplicationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApplicationId
}

// GetApplicationIdOk returns a tuple with the ApplicationId field value
// and a boolean to check if the value has been set.
func (o *MessageRequest) GetApplicationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApplicationId, true
}

// SetApplicationId sets field value
func (o *MessageRequest) SetApplicationId(v string) {
	o.ApplicationId = v
}

// GetTo returns the To field value
func (o *MessageRequest) GetTo() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.To
}

// GetToOk returns a tuple with the To field value
// and a boolean to check if the value has been set.
func (o *MessageRequest) GetToOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.To, true
}

// SetTo sets field value
func (o *MessageRequest) SetTo(v []string) {
	o.To = v
}

// GetFrom returns the From field value
func (o *MessageRequest) GetFrom() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.From
}

// GetFromOk returns a tuple with the From field value
// and a boolean to check if the value has been set.
func (o *MessageRequest) GetFromOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.From, true
}

// SetFrom sets field value
func (o *MessageRequest) SetFrom(v string) {
	o.From = v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *MessageRequest) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageRequest) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *MessageRequest) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *MessageRequest) SetText(v string) {
	o.Text = &v
}

// GetMedia returns the Media field value if set, zero value otherwise.
func (o *MessageRequest) GetMedia() []string {
	if o == nil || IsNil(o.Media) {
		var ret []string
		return ret
	}
	return o.Media
}

// GetMediaOk returns a tuple with the Media field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageRequest) GetMediaOk() ([]string, bool) {
	if o == nil || IsNil(o.Media) {
		return nil, false
	}
	return o.Media, true
}

// HasMedia returns a boolean if a field has been set.
func (o *MessageRequest) HasMedia() bool {
	if o != nil && !IsNil(o.Media) {
		return true
	}

	return false
}

// SetMedia gets a reference to the given []string and assigns it to the Media field.
func (o *MessageRequest) SetMedia(v []string) {
	o.Media = v
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *MessageRequest) GetTag() string {
	if o == nil || IsNil(o.Tag) {
		var ret string
		return ret
	}
	return *o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageRequest) GetTagOk() (*string, bool) {
	if o == nil || IsNil(o.Tag) {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *MessageRequest) HasTag() bool {
	if o != nil && !IsNil(o.Tag) {
		return true
	}

	return false
}

// SetTag gets a reference to the given string and assigns it to the Tag field.
func (o *MessageRequest) SetTag(v string) {
	o.Tag = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *MessageRequest) GetPriority() PriorityEnum {
	if o == nil || IsNil(o.Priority) {
		var ret PriorityEnum
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageRequest) GetPriorityOk() (*PriorityEnum, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *MessageRequest) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given PriorityEnum and assigns it to the Priority field.
func (o *MessageRequest) SetPriority(v PriorityEnum) {
	o.Priority = &v
}

// GetExpiration returns the Expiration field value if set, zero value otherwise.
func (o *MessageRequest) GetExpiration() time.Time {
	if o == nil || IsNil(o.Expiration) {
		var ret time.Time
		return ret
	}
	return *o.Expiration
}

// GetExpirationOk returns a tuple with the Expiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageRequest) GetExpirationOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Expiration) {
		return nil, false
	}
	return o.Expiration, true
}

// HasExpiration returns a boolean if a field has been set.
func (o *MessageRequest) HasExpiration() bool {
	if o != nil && !IsNil(o.Expiration) {
		return true
	}

	return false
}

// SetExpiration gets a reference to the given time.Time and assigns it to the Expiration field.
func (o *MessageRequest) SetExpiration(v time.Time) {
	o.Expiration = &v
}

func (o MessageRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MessageRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["applicationId"] = o.ApplicationId
	toSerialize["to"] = o.To
	toSerialize["from"] = o.From
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Media) {
		toSerialize["media"] = o.Media
	}
	if !IsNil(o.Tag) {
		toSerialize["tag"] = o.Tag
	}
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	if !IsNil(o.Expiration) {
		toSerialize["expiration"] = o.Expiration
	}
	return toSerialize, nil
}

func (o *MessageRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"applicationId",
		"to",
		"from",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMessageRequest := _MessageRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMessageRequest)

	if err != nil {
		return err
	}

	*o = MessageRequest(varMessageRequest)

	return err
}

type NullableMessageRequest struct {
	value *MessageRequest
	isSet bool
}

func (v NullableMessageRequest) Get() *MessageRequest {
	return v.value
}

func (v *NullableMessageRequest) Set(val *MessageRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageRequest(val *MessageRequest) *NullableMessageRequest {
	return &NullableMessageRequest{value: val, isSet: true}
}

func (v NullableMessageRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


