/*
Bandwidth

Bandwidth's Communication APIs

API version: 1.0.0
Contact: letstalk@bandwidth.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bandwidth

import (
	"encoding/json"
	"fmt"
)

// CallTranscriptionTrackEnum Which `track` this transcription is derived from.
type CallTranscriptionTrackEnum string

// List of callTranscriptionTrackEnum
const (
	CallTranscriptionTrackInbound CallTranscriptionTrackEnum = "inbound"
	CallTranscriptionTrackOutbound CallTranscriptionTrackEnum = "outbound"
)

// All allowed values of CallTranscriptionTrackEnum enum
var AllowedCallTranscriptionTrackEnumEnumValues = []CallTranscriptionTrackEnum{
	"inbound",
	"outbound",
}

func (v *CallTranscriptionTrackEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CallTranscriptionTrackEnum(value)
	for _, existing := range AllowedCallTranscriptionTrackEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CallTranscriptionTrackEnum", value)
}

// NewCallTranscriptionTrackEnumFromValue returns a pointer to a valid CallTranscriptionTrackEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCallTranscriptionTrackEnumFromValue(v string) (*CallTranscriptionTrackEnum, error) {
	ev := CallTranscriptionTrackEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CallTranscriptionTrackEnum: valid values are %v", v, AllowedCallTranscriptionTrackEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CallTranscriptionTrackEnum) IsValid() bool {
	for _, existing := range AllowedCallTranscriptionTrackEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to callTranscriptionTrackEnum value
func (v CallTranscriptionTrackEnum) Ptr() *CallTranscriptionTrackEnum {
	return &v
}

type NullableCallTranscriptionTrackEnum struct {
	value *CallTranscriptionTrackEnum
	isSet bool
}

func (v NullableCallTranscriptionTrackEnum) Get() *CallTranscriptionTrackEnum {
	return v.value
}

func (v *NullableCallTranscriptionTrackEnum) Set(val *CallTranscriptionTrackEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableCallTranscriptionTrackEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableCallTranscriptionTrackEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCallTranscriptionTrackEnum(val *CallTranscriptionTrackEnum) *NullableCallTranscriptionTrackEnum {
	return &NullableCallTranscriptionTrackEnum{value: val, isSet: true}
}

func (v NullableCallTranscriptionTrackEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCallTranscriptionTrackEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

