/*
Bandwidth

Bandwidth's Communication APIs

API version: 1.0.0
Contact: letstalk@bandwidth.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bandwidth

import (
	"encoding/json"
	"fmt"
)

// LookupStatusEnum The status of the request (IN_PROGRESS, COMPLETE, PARTIAL_COMPLETE, or FAILED).
type LookupStatusEnum string

// List of lookupStatusEnum
const (
	LookupStatusInProgress LookupStatusEnum = "IN_PROGRESS"
	LookupStatusComplete LookupStatusEnum = "COMPLETE"
	LookupStatusPartialComplete LookupStatusEnum = "PARTIAL_COMPLETE"
	LookupStatusFailed LookupStatusEnum = "FAILED"
)

// All allowed values of LookupStatusEnum enum
var AllowedLookupStatusEnumEnumValues = []LookupStatusEnum{
	"IN_PROGRESS",
	"COMPLETE",
	"PARTIAL_COMPLETE",
	"FAILED",
}

func (v *LookupStatusEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LookupStatusEnum(value)
	for _, existing := range AllowedLookupStatusEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LookupStatusEnum", value)
}

// NewLookupStatusEnumFromValue returns a pointer to a valid LookupStatusEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLookupStatusEnumFromValue(v string) (*LookupStatusEnum, error) {
	ev := LookupStatusEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LookupStatusEnum: valid values are %v", v, AllowedLookupStatusEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LookupStatusEnum) IsValid() bool {
	for _, existing := range AllowedLookupStatusEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to lookupStatusEnum value
func (v LookupStatusEnum) Ptr() *LookupStatusEnum {
	return &v
}

type NullableLookupStatusEnum struct {
	value *LookupStatusEnum
	isSet bool
}

func (v NullableLookupStatusEnum) Get() *LookupStatusEnum {
	return v.value
}

func (v *NullableLookupStatusEnum) Set(val *LookupStatusEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableLookupStatusEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableLookupStatusEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLookupStatusEnum(val *LookupStatusEnum) *NullableLookupStatusEnum {
	return &NullableLookupStatusEnum{value: val, isSet: true}
}

func (v NullableLookupStatusEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLookupStatusEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

