/*
Bandwidth

Bandwidth's Communication APIs

API version: 1.0.0
Contact: letstalk@bandwidth.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bandwidth

import (
	"encoding/json"
)

// checks if the Media type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Media{}

// Media struct for Media
type Media struct {
	Content *string `json:"content,omitempty"`
	ContentLength *int32 `json:"contentLength,omitempty"`
	MediaName *string `json:"mediaName,omitempty"`
}

// NewMedia instantiates a new Media object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMedia() *Media {
	this := Media{}
	return &this
}

// NewMediaWithDefaults instantiates a new Media object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMediaWithDefaults() *Media {
	this := Media{}
	return &this
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *Media) GetContent() string {
	if o == nil || IsNil(o.Content) {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Media) GetContentOk() (*string, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *Media) HasContent() bool {
	if o != nil && !IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *Media) SetContent(v string) {
	o.Content = &v
}

// GetContentLength returns the ContentLength field value if set, zero value otherwise.
func (o *Media) GetContentLength() int32 {
	if o == nil || IsNil(o.ContentLength) {
		var ret int32
		return ret
	}
	return *o.ContentLength
}

// GetContentLengthOk returns a tuple with the ContentLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Media) GetContentLengthOk() (*int32, bool) {
	if o == nil || IsNil(o.ContentLength) {
		return nil, false
	}
	return o.ContentLength, true
}

// HasContentLength returns a boolean if a field has been set.
func (o *Media) HasContentLength() bool {
	if o != nil && !IsNil(o.ContentLength) {
		return true
	}

	return false
}

// SetContentLength gets a reference to the given int32 and assigns it to the ContentLength field.
func (o *Media) SetContentLength(v int32) {
	o.ContentLength = &v
}

// GetMediaName returns the MediaName field value if set, zero value otherwise.
func (o *Media) GetMediaName() string {
	if o == nil || IsNil(o.MediaName) {
		var ret string
		return ret
	}
	return *o.MediaName
}

// GetMediaNameOk returns a tuple with the MediaName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Media) GetMediaNameOk() (*string, bool) {
	if o == nil || IsNil(o.MediaName) {
		return nil, false
	}
	return o.MediaName, true
}

// HasMediaName returns a boolean if a field has been set.
func (o *Media) HasMediaName() bool {
	if o != nil && !IsNil(o.MediaName) {
		return true
	}

	return false
}

// SetMediaName gets a reference to the given string and assigns it to the MediaName field.
func (o *Media) SetMediaName(v string) {
	o.MediaName = &v
}

func (o Media) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Media) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	if !IsNil(o.ContentLength) {
		toSerialize["contentLength"] = o.ContentLength
	}
	if !IsNil(o.MediaName) {
		toSerialize["mediaName"] = o.MediaName
	}
	return toSerialize, nil
}

type NullableMedia struct {
	value *Media
	isSet bool
}

func (v NullableMedia) Get() *Media {
	return v.value
}

func (v *NullableMedia) Set(val *Media) {
	v.value = val
	v.isSet = true
}

func (v NullableMedia) IsSet() bool {
	return v.isSet
}

func (v *NullableMedia) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMedia(val *Media) *NullableMedia {
	return &NullableMedia{value: val, isSet: true}
}

func (v NullableMedia) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMedia) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


