/*
Bandwidth

Testing TranscriptionsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package bandwidth

import (
	"context"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	openapiclient "github.com/winking324/bandwidth"
)

func Test_openapi_TranscriptionsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test TranscriptionsAPIService DeleteRealTimeTranscription", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var accountId string
		var callId string
		var transcriptionId string

		httpRes, err := apiClient.TranscriptionsAPI.DeleteRealTimeTranscription(context.Background(), accountId, callId, transcriptionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TranscriptionsAPIService GetRealTimeTranscription", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var accountId string
		var callId string
		var transcriptionId string

		resp, httpRes, err := apiClient.TranscriptionsAPI.GetRealTimeTranscription(context.Background(), accountId, callId, transcriptionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TranscriptionsAPIService ListRealTimeTranscriptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var accountId string
		var callId string

		resp, httpRes, err := apiClient.TranscriptionsAPI.ListRealTimeTranscriptions(context.Background(), accountId, callId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
