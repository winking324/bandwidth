/*
Bandwidth

Testing RecordingsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	openapiclient "github.com/winking324/bandwidth"
)

func Test_openapi_RecordingsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RecordingsAPIService DeleteRecording", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var accountId string
		var callId string
		var recordingId string

		httpRes, err := apiClient.RecordingsAPI.DeleteRecording(context.Background(), accountId, callId, recordingId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RecordingsAPIService DeleteRecordingMedia", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var accountId string
		var callId string
		var recordingId string

		httpRes, err := apiClient.RecordingsAPI.DeleteRecordingMedia(context.Background(), accountId, callId, recordingId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RecordingsAPIService DeleteRecordingTranscription", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var accountId string
		var callId string
		var recordingId string

		httpRes, err := apiClient.RecordingsAPI.DeleteRecordingTranscription(context.Background(), accountId, callId, recordingId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RecordingsAPIService DownloadCallRecording", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var accountId string
		var callId string
		var recordingId string

		resp, httpRes, err := apiClient.RecordingsAPI.DownloadCallRecording(context.Background(), accountId, callId, recordingId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RecordingsAPIService GetCallRecording", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var accountId string
		var callId string
		var recordingId string

		resp, httpRes, err := apiClient.RecordingsAPI.GetCallRecording(context.Background(), accountId, callId, recordingId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RecordingsAPIService GetRecordingTranscription", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var accountId string
		var callId string
		var recordingId string

		resp, httpRes, err := apiClient.RecordingsAPI.GetRecordingTranscription(context.Background(), accountId, callId, recordingId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RecordingsAPIService ListAccountCallRecordings", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var accountId string

		resp, httpRes, err := apiClient.RecordingsAPI.ListAccountCallRecordings(context.Background(), accountId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RecordingsAPIService ListCallRecordings", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var accountId string
		var callId string

		resp, httpRes, err := apiClient.RecordingsAPI.ListCallRecordings(context.Background(), accountId, callId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RecordingsAPIService TranscribeCallRecording", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var accountId string
		var callId string
		var recordingId string

		httpRes, err := apiClient.RecordingsAPI.TranscribeCallRecording(context.Background(), accountId, callId, recordingId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RecordingsAPIService UpdateCallRecordingState", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var accountId string
		var callId string

		httpRes, err := apiClient.RecordingsAPI.UpdateCallRecordingState(context.Background(), accountId, callId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
