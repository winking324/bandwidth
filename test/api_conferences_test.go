/*
Bandwidth

Testing ConferencesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	openapiclient "github.com/winking324/bandwidth"
)

func Test_openapi_ConferencesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ConferencesAPIService DownloadConferenceRecording", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var accountId string
		var conferenceId string
		var recordingId string

		resp, httpRes, err := apiClient.ConferencesAPI.DownloadConferenceRecording(context.Background(), accountId, conferenceId, recordingId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConferencesAPIService GetConference", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var accountId string
		var conferenceId string

		resp, httpRes, err := apiClient.ConferencesAPI.GetConference(context.Background(), accountId, conferenceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConferencesAPIService GetConferenceMember", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var accountId string
		var conferenceId string
		var memberId string

		resp, httpRes, err := apiClient.ConferencesAPI.GetConferenceMember(context.Background(), accountId, conferenceId, memberId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConferencesAPIService GetConferenceRecording", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var accountId string
		var conferenceId string
		var recordingId string

		resp, httpRes, err := apiClient.ConferencesAPI.GetConferenceRecording(context.Background(), accountId, conferenceId, recordingId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConferencesAPIService ListConferenceRecordings", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var accountId string
		var conferenceId string

		resp, httpRes, err := apiClient.ConferencesAPI.ListConferenceRecordings(context.Background(), accountId, conferenceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConferencesAPIService ListConferences", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var accountId string

		resp, httpRes, err := apiClient.ConferencesAPI.ListConferences(context.Background(), accountId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConferencesAPIService UpdateConference", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var accountId string
		var conferenceId string

		httpRes, err := apiClient.ConferencesAPI.UpdateConference(context.Background(), accountId, conferenceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConferencesAPIService UpdateConferenceBxml", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var accountId string
		var conferenceId string

		httpRes, err := apiClient.ConferencesAPI.UpdateConferenceBxml(context.Background(), accountId, conferenceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConferencesAPIService UpdateConferenceMember", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var accountId string
		var conferenceId string
		var memberId string

		httpRes, err := apiClient.ConferencesAPI.UpdateConferenceMember(context.Background(), accountId, conferenceId, memberId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
